<?php

namespace Ortfo\Db;

// This is a autogenerated file:Tags

class Tags {
    private ?array $aliases; // json:aliases Optional
    private ?string $description; // json:description Optional
    private ?Detect $detect; // json:detect Optional
    private ?string $learnMoreAt; // json:learn more at Optional
    private string $plural; // json:plural Required
    private string $singular; // json:singular Required

    /**
     * @param array|null $aliases
     * @param string|null $description
     * @param Detect|null $detect
     * @param string|null $learnMoreAt
     * @param string $plural
     * @param string $singular
     */
    public function __construct(?array $aliases, ?string $description, ?Detect $detect, ?string $learnMoreAt, string $plural, string $singular) {
        $this->aliases = $aliases;
        $this->description = $description;
        $this->detect = $detect;
        $this->learnMoreAt = $learnMoreAt;
        $this->plural = $plural;
        $this->singular = $singular;
    }

    /**
     * Other singular-form names of tags that refer to this tag. The names mentionned hereshould not be used to define other tags.
     *
     * @param ?array $value
     * @throws Exception
     * @return ?array
     */
    public static function fromAliases(?array $value): ?array {
        if (!is_null($value)) {
            return  array_map(function ($value) {
                return $value; /*string*/
            }, $value);
        } else {
            return null;
        }
    }

    /**
     * Other singular-form names of tags that refer to this tag. The names mentionned hereshould not be used to define other tags.
     *
     * @throws Exception
     * @return ?array
     */
    public function toAliases(): ?array {
        if (Tags::validateAliases($this->aliases))  {
            if (!is_null($this->aliases)) {
                return array_map(function ($value) {
                    return $value; /*string*/
                }, $this->aliases);
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Tags::aliases');
    }

    /**
     * Other singular-form names of tags that refer to this tag. The names mentionned hereshould not be used to define other tags.
     *
     * @param array|null
     * @return bool
     * @throws Exception
     */
    public static function validateAliases(?array $value): bool {
        if (!is_null($value)) {
            if (!is_array($value)) {
                throw new Exception("Attribute Error:Tags::aliases");
            }
            array_walk($value, function($value_v) {
                if (!is_string($value_v)) {
                    throw new Exception("Attribute Error:Tags::aliases");
                }
            });
        }
        return true;
    }

    /**
     * Other singular-form names of tags that refer to this tag. The names mentionned hereshould not be used to define other tags.
     *
     * @throws Exception
     * @return ?array
     */
    public function getAliases(): ?array {
        if (Tags::validateAliases($this->aliases))  {
            return $this->aliases;
        }
        throw new Exception('never get to getAliases Tags::aliases');
    }

    /**
     * Other singular-form names of tags that refer to this tag. The names mentionned hereshould not be used to define other tags.
     *
     * @return ?array
     */
    public static function sampleAliases(): ?array {
        return  array(
            'Tags::::31' /*31:*/
        ); /* 31:aliases*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromDescription(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toDescription(): ?string {
        if (Tags::validateDescription($this->description))  {
            if (!is_null($this->description)) {
                return $this->description; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Tags::description');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateDescription(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Tags::description");
            }
        }
        return true;
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function getDescription(): ?string {
        if (Tags::validateDescription($this->description))  {
            return $this->description;
        }
        throw new Exception('never get to getDescription Tags::description');
    }

    /**
     * @return ?string
     */
    public static function sampleDescription(): ?string {
        return 'Tags::description::32'; /*32:description*/
    }

    /**
     * Various ways to automatically detect that a work is tagged with this tag.
     *
     * @param ?stdClass $value
     * @throws Exception
     * @return ?Detect
     */
    public static function fromDetect(?stdClass $value): ?Detect {
        if (!is_null($value)) {
            return Detect::from($value); /*class*/
        } else {
            return null;
        }
    }

    /**
     * Various ways to automatically detect that a work is tagged with this tag.
     *
     * @throws Exception
     * @return ?stdClass
     */
    public function toDetect(): ?stdClass {
        if (Tags::validateDetect($this->detect))  {
            if (!is_null($this->detect)) {
                return $this->detect->to(); /*class*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Tags::detect');
    }

    /**
     * Various ways to automatically detect that a work is tagged with this tag.
     *
     * @param Detect|null
     * @return bool
     * @throws Exception
     */
    public static function validateDetect(?Detect $value): bool {
        if (!is_null($value)) {
            $value->validate();
        }
        return true;
    }

    /**
     * Various ways to automatically detect that a work is tagged with this tag.
     *
     * @throws Exception
     * @return ?Detect
     */
    public function getDetect(): ?Detect {
        if (Tags::validateDetect($this->detect))  {
            return $this->detect;
        }
        throw new Exception('never get to getDetect Tags::detect');
    }

    /**
     * Various ways to automatically detect that a work is tagged with this tag.
     *
     * @return ?Detect
     */
    public static function sampleDetect(): ?Detect {
        return Detect::sample(); /*33:detect*/
    }

    /**
     * URL to a website where more information can be found about this tag.
     *
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromLearnMoreAt(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * URL to a website where more information can be found about this tag.
     *
     * @throws Exception
     * @return ?string
     */
    public function toLearnMoreAt(): ?string {
        if (Tags::validateLearnMoreAt($this->learnMoreAt))  {
            if (!is_null($this->learnMoreAt)) {
                return $this->learnMoreAt; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Tags::learnMoreAt');
    }

    /**
     * URL to a website where more information can be found about this tag.
     *
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateLearnMoreAt(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:Tags::learnMoreAt");
            }
        }
        return true;
    }

    /**
     * URL to a website where more information can be found about this tag.
     *
     * @throws Exception
     * @return ?string
     */
    public function getLearnMoreAt(): ?string {
        if (Tags::validateLearnMoreAt($this->learnMoreAt))  {
            return $this->learnMoreAt;
        }
        throw new Exception('never get to getLearnMoreAt Tags::learnMoreAt');
    }

    /**
     * URL to a website where more information can be found about this tag.
     *
     * @return ?string
     */
    public static function sampleLearnMoreAt(): ?string {
        return 'Tags::learnMoreAt::34'; /*34:learnMoreAt*/
    }

    /**
     * Plural-form name of the tag. For example, "Books".
     *
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromPlural(string $value): string {
        return $value; /*string*/
    }

    /**
     * Plural-form name of the tag. For example, "Books".
     *
     * @throws Exception
     * @return string
     */
    public function toPlural(): string {
        if (Tags::validatePlural($this->plural))  {
            return $this->plural; /*string*/
        }
        throw new Exception('never get to this Tags::plural');
    }

    /**
     * Plural-form name of the tag. For example, "Books".
     *
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validatePlural(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Tags::plural");
        }
        return true;
    }

    /**
     * Plural-form name of the tag. For example, "Books".
     *
     * @throws Exception
     * @return string
     */
    public function getPlural(): string {
        if (Tags::validatePlural($this->plural))  {
            return $this->plural;
        }
        throw new Exception('never get to getPlural Tags::plural');
    }

    /**
     * Plural-form name of the tag. For example, "Books".
     *
     * @return string
     */
    public static function samplePlural(): string {
        return 'Tags::plural::35'; /*35:plural*/
    }

    /**
     * Singular-form name of the tag. For example, "Book".
     *
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromSingular(string $value): string {
        return $value; /*string*/
    }

    /**
     * Singular-form name of the tag. For example, "Book".
     *
     * @throws Exception
     * @return string
     */
    public function toSingular(): string {
        if (Tags::validateSingular($this->singular))  {
            return $this->singular; /*string*/
        }
        throw new Exception('never get to this Tags::singular');
    }

    /**
     * Singular-form name of the tag. For example, "Book".
     *
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateSingular(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Tags::singular");
        }
        return true;
    }

    /**
     * Singular-form name of the tag. For example, "Book".
     *
     * @throws Exception
     * @return string
     */
    public function getSingular(): string {
        if (Tags::validateSingular($this->singular))  {
            return $this->singular;
        }
        throw new Exception('never get to getSingular Tags::singular');
    }

    /**
     * Singular-form name of the tag. For example, "Book".
     *
     * @return string
     */
    public static function sampleSingular(): string {
        return 'Tags::singular::36'; /*36:singular*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return Tags::validateAliases($this->aliases)
        || Tags::validateDescription($this->description)
        || Tags::validateDetect($this->detect)
        || Tags::validateLearnMoreAt($this->learnMoreAt)
        || Tags::validatePlural($this->plural)
        || Tags::validateSingular($this->singular);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'aliases'} = $this->toAliases();
        $out->{'description'} = $this->toDescription();
        $out->{'detect'} = $this->toDetect();
        $out->{'learn more at'} = $this->toLearnMoreAt();
        $out->{'plural'} = $this->toPlural();
        $out->{'singular'} = $this->toSingular();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return Tags
     * @throws Exception
     */
    public static function from(stdClass $obj): Tags {
        return new Tags(
         Tags::fromAliases($obj->{'aliases'})
        ,Tags::fromDescription($obj->{'description'})
        ,Tags::fromDetect($obj->{'detect'})
        ,Tags::fromLearnMoreAt($obj->{'learn more at'})
        ,Tags::fromPlural($obj->{'plural'})
        ,Tags::fromSingular($obj->{'singular'})
        );
    }

    /**
     * @return Tags
     */
    public static function sample(): Tags {
        return new Tags(
         Tags::sampleAliases()
        ,Tags::sampleDescription()
        ,Tags::sampleDetect()
        ,Tags::sampleLearnMoreAt()
        ,Tags::samplePlural()
        ,Tags::sampleSingular()
        );
    }
}

// This is a autogenerated file:Detect

class Detect {
    private ?array $files; // json:files Optional
    private ?array $madeWith; // json:made with Optional
    private ?array $search; // json:search Optional

    /**
     * @param array|null $files
     * @param array|null $madeWith
     * @param array|null $search
     */
    public function __construct(?array $files, ?array $madeWith, ?array $search) {
        $this->files = $files;
        $this->madeWith = $madeWith;
        $this->search = $search;
    }

    /**
     * @param ?array $value
     * @throws Exception
     * @return ?array
     */
    public static function fromFiles(?array $value): ?array {
        if (!is_null($value)) {
            return  array_map(function ($value) {
                return $value; /*string*/
            }, $value);
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?array
     */
    public function toFiles(): ?array {
        if (Detect::validateFiles($this->files))  {
            if (!is_null($this->files)) {
                return array_map(function ($value) {
                    return $value; /*string*/
                }, $this->files);
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Detect::files');
    }

    /**
     * @param array|null
     * @return bool
     * @throws Exception
     */
    public static function validateFiles(?array $value): bool {
        if (!is_null($value)) {
            if (!is_array($value)) {
                throw new Exception("Attribute Error:Detect::files");
            }
            array_walk($value, function($value_v) {
                if (!is_string($value_v)) {
                    throw new Exception("Attribute Error:Detect::files");
                }
            });
        }
        return true;
    }

    /**
     * @throws Exception
     * @return ?array
     */
    public function getFiles(): ?array {
        if (Detect::validateFiles($this->files))  {
            return $this->files;
        }
        throw new Exception('never get to getFiles Detect::files');
    }

    /**
     * @return ?array
     */
    public static function sampleFiles(): ?array {
        return  array(
            'Detect::::31' /*31:*/
        ); /* 31:files*/
    }

    /**
     * @param ?array $value
     * @throws Exception
     * @return ?array
     */
    public static function fromMadeWith(?array $value): ?array {
        if (!is_null($value)) {
            return  array_map(function ($value) {
                return $value; /*string*/
            }, $value);
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?array
     */
    public function toMadeWith(): ?array {
        if (Detect::validateMadeWith($this->madeWith))  {
            if (!is_null($this->madeWith)) {
                return array_map(function ($value) {
                    return $value; /*string*/
                }, $this->madeWith);
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Detect::madeWith');
    }

    /**
     * @param array|null
     * @return bool
     * @throws Exception
     */
    public static function validateMadeWith(?array $value): bool {
        if (!is_null($value)) {
            if (!is_array($value)) {
                throw new Exception("Attribute Error:Detect::madeWith");
            }
            array_walk($value, function($value_v) {
                if (!is_string($value_v)) {
                    throw new Exception("Attribute Error:Detect::madeWith");
                }
            });
        }
        return true;
    }

    /**
     * @throws Exception
     * @return ?array
     */
    public function getMadeWith(): ?array {
        if (Detect::validateMadeWith($this->madeWith))  {
            return $this->madeWith;
        }
        throw new Exception('never get to getMadeWith Detect::madeWith');
    }

    /**
     * @return ?array
     */
    public static function sampleMadeWith(): ?array {
        return  array(
            'Detect::::32' /*32:*/
        ); /* 32:madeWith*/
    }

    /**
     * @param ?array $value
     * @throws Exception
     * @return ?array
     */
    public static function fromSearch(?array $value): ?array {
        if (!is_null($value)) {
            return  array_map(function ($value) {
                return $value; /*string*/
            }, $value);
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?array
     */
    public function toSearch(): ?array {
        if (Detect::validateSearch($this->search))  {
            if (!is_null($this->search)) {
                return array_map(function ($value) {
                    return $value; /*string*/
                }, $this->search);
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Detect::search');
    }

    /**
     * @param array|null
     * @return bool
     * @throws Exception
     */
    public static function validateSearch(?array $value): bool {
        if (!is_null($value)) {
            if (!is_array($value)) {
                throw new Exception("Attribute Error:Detect::search");
            }
            array_walk($value, function($value_v) {
                if (!is_string($value_v)) {
                    throw new Exception("Attribute Error:Detect::search");
                }
            });
        }
        return true;
    }

    /**
     * @throws Exception
     * @return ?array
     */
    public function getSearch(): ?array {
        if (Detect::validateSearch($this->search))  {
            return $this->search;
        }
        throw new Exception('never get to getSearch Detect::search');
    }

    /**
     * @return ?array
     */
    public static function sampleSearch(): ?array {
        return  array(
            'Detect::::33' /*33:*/
        ); /* 33:search*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return Detect::validateFiles($this->files)
        || Detect::validateMadeWith($this->madeWith)
        || Detect::validateSearch($this->search);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'files'} = $this->toFiles();
        $out->{'made with'} = $this->toMadeWith();
        $out->{'search'} = $this->toSearch();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return Detect
     * @throws Exception
     */
    public static function from(stdClass $obj): Detect {
        return new Detect(
         Detect::fromFiles($obj->{'files'})
        ,Detect::fromMadeWith($obj->{'made with'})
        ,Detect::fromSearch($obj->{'search'})
        );
    }

    /**
     * @return Detect
     */
    public static function sample(): Detect {
        return new Detect(
         Detect::sampleFiles()
        ,Detect::sampleMadeWith()
        ,Detect::sampleSearch()
        );
    }
}
