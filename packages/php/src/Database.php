<?php

namespace Ortfo\Db;

// This is a autogenerated file:Database

class Database {
    private string $builtAt; // json:builtAt Required
    private stdClass $content; // json:content Required
    private string $descriptionHash; // json:descriptionHash Required
    private string $id; // json:id Required
    private Metadata $metadata; // json:metadata Required
    private bool $partial; // json:Partial Required

    /**
     * @param string $builtAt
     * @param stdClass $content
     * @param string $descriptionHash
     * @param string $id
     * @param Metadata $metadata
     * @param bool $partial
     */
    public function __construct(string $builtAt, stdClass $content, string $descriptionHash, string $id, Metadata $metadata, bool $partial) {
        $this->builtAt = $builtAt;
        $this->content = $content;
        $this->descriptionHash = $descriptionHash;
        $this->id = $id;
        $this->metadata = $metadata;
        $this->partial = $partial;
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromBuiltAt(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toBuiltAt(): string {
        if (Database::validateBuiltAt($this->builtAt))  {
            return $this->builtAt; /*string*/
        }
        throw new Exception('never get to this Database::builtAt');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateBuiltAt(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Database::builtAt");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getBuiltAt(): string {
        if (Database::validateBuiltAt($this->builtAt))  {
            return $this->builtAt;
        }
        throw new Exception('never get to getBuiltAt Database::builtAt');
    }

    /**
     * @return string
     */
    public static function sampleBuiltAt(): string {
        return 'Database::builtAt::31'; /*31:builtAt*/
    }

    /**
     * @param stdClass $value
     * @throws Exception
     * @return stdClass
     */
    public static function fromContent(stdClass $value): stdClass {
        function from($my): stdClass {
            $out = new stdClass();
            foreach ($my as $k => $v) {
                $out->$k = ContentValue::from($v); /*class*/
            }
            return $out;
        }
        return from($value);
    }

    /**
     * @throws Exception
     * @return stdClass
     */
    public function toContent(): stdClass {
        if (Database::validateContent($this->content))  {
            function to($my): stdClass {
                $out = new stdClass();
                foreach ($my as $k => $v) {
                    $my->$k = $v->to(); /*class*/
                }
                return $out;
            }
            return to($this->content);
        }
        throw new Exception('never get to this Database::content');
    }

    /**
     * @param stdClass
     * @return bool
     * @throws Exception
     */
    public static function validateContent(stdClass $value): bool {
        foreach ($value as $k => $v) {
            $v->validate();
        }
        return true;
    }

    /**
     * @throws Exception
     * @return stdClass
     */
    public function getContent(): stdClass {
        if (Database::validateContent($this->content))  {
            return $this->content;
        }
        throw new Exception('never get to getContent Database::content');
    }

    /**
     * @return stdClass
     */
    public static function sampleContent(): stdClass {
        function sample(): stdClass {
            $out = new stdClass();
            $out->{'Database'} = ContentValue::sample(); /*32:content*/
            return $out;
        }
        return sample();
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromDescriptionHash(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toDescriptionHash(): string {
        if (Database::validateDescriptionHash($this->descriptionHash))  {
            return $this->descriptionHash; /*string*/
        }
        throw new Exception('never get to this Database::descriptionHash');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateDescriptionHash(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Database::descriptionHash");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getDescriptionHash(): string {
        if (Database::validateDescriptionHash($this->descriptionHash))  {
            return $this->descriptionHash;
        }
        throw new Exception('never get to getDescriptionHash Database::descriptionHash');
    }

    /**
     * @return string
     */
    public static function sampleDescriptionHash(): string {
        return 'Database::descriptionHash::33'; /*33:descriptionHash*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromID(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toID(): string {
        if (Database::validateID($this->id))  {
            return $this->id; /*string*/
        }
        throw new Exception('never get to this Database::id');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateID(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Database::id");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getID(): string {
        if (Database::validateID($this->id))  {
            return $this->id;
        }
        throw new Exception('never get to getID Database::id');
    }

    /**
     * @return string
     */
    public static function sampleID(): string {
        return 'Database::id::34'; /*34:id*/
    }

    /**
     * @param stdClass $value
     * @throws Exception
     * @return Metadata
     */
    public static function fromMetadata(stdClass $value): Metadata {
        return Metadata::from($value); /*class*/
    }

    /**
     * @throws Exception
     * @return stdClass
     */
    public function toMetadata(): stdClass {
        if (Database::validateMetadata($this->metadata))  {
            return $this->metadata->to(); /*class*/
        }
        throw new Exception('never get to this Database::metadata');
    }

    /**
     * @param Metadata
     * @return bool
     * @throws Exception
     */
    public static function validateMetadata(Metadata $value): bool {
        $value->validate();
        return true;
    }

    /**
     * @throws Exception
     * @return Metadata
     */
    public function getMetadata(): Metadata {
        if (Database::validateMetadata($this->metadata))  {
            return $this->metadata;
        }
        throw new Exception('never get to getMetadata Database::metadata');
    }

    /**
     * @return Metadata
     */
    public static function sampleMetadata(): Metadata {
        return Metadata::sample(); /*35:metadata*/
    }

    /**
     * @param bool $value
     * @throws Exception
     * @return bool
     */
    public static function fromPartial(bool $value): bool {
        return $value; /*bool*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function toPartial(): bool {
        if (Database::validatePartial($this->partial))  {
            return $this->partial; /*bool*/
        }
        throw new Exception('never get to this Database::partial');
    }

    /**
     * @param bool
     * @return bool
     * @throws Exception
     */
    public static function validatePartial(bool $value): bool {
        if (!is_bool($value)) {
            throw new Exception("Attribute Error:Database::partial");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function getPartial(): bool {
        if (Database::validatePartial($this->partial))  {
            return $this->partial;
        }
        throw new Exception('never get to getPartial Database::partial');
    }

    /**
     * @return bool
     */
    public static function samplePartial(): bool {
        return true; /*36:partial*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return Database::validateBuiltAt($this->builtAt)
        || Database::validateContent($this->content)
        || Database::validateDescriptionHash($this->descriptionHash)
        || Database::validateID($this->id)
        || Database::validateMetadata($this->metadata)
        || Database::validatePartial($this->partial);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'builtAt'} = $this->toBuiltAt();
        $out->{'content'} = $this->toContent();
        $out->{'descriptionHash'} = $this->toDescriptionHash();
        $out->{'id'} = $this->toID();
        $out->{'metadata'} = $this->toMetadata();
        $out->{'Partial'} = $this->toPartial();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return Database
     * @throws Exception
     */
    public static function from(stdClass $obj): Database {
        return new Database(
         Database::fromBuiltAt($obj->{'builtAt'})
        ,Database::fromContent($obj->{'content'})
        ,Database::fromDescriptionHash($obj->{'descriptionHash'})
        ,Database::fromID($obj->{'id'})
        ,Database::fromMetadata($obj->{'metadata'})
        ,Database::fromPartial($obj->{'Partial'})
        );
    }

    /**
     * @return Database
     */
    public static function sample(): Database {
        return new Database(
         Database::sampleBuiltAt()
        ,Database::sampleContent()
        ,Database::sampleDescriptionHash()
        ,Database::sampleID()
        ,Database::sampleMetadata()
        ,Database::samplePartial()
        );
    }
}

// This is a autogenerated file:ContentValue

class ContentValue {
    private array $blocks; // json:blocks Required
    private stdClass $footnotes; // json:footnotes Required
    private array $layout; // json:layout Required
    private string $title; // json:title Required

    /**
     * @param array $blocks
     * @param stdClass $footnotes
     * @param array $layout
     * @param string $title
     */
    public function __construct(array $blocks, stdClass $footnotes, array $layout, string $title) {
        $this->blocks = $blocks;
        $this->footnotes = $footnotes;
        $this->layout = $layout;
        $this->title = $title;
    }

    /**
     * @param array $value
     * @throws Exception
     * @return array
     */
    public static function fromBlocks(array $value): array {
        return  array_map(function ($value) {
            return BlockElement::from($value); /*class*/
        }, $value);
    }

    /**
     * @throws Exception
     * @return array
     */
    public function toBlocks(): array {
        if (ContentValue::validateBlocks($this->blocks))  {
            return array_map(function ($value) {
                return $value->to(); /*class*/
            }, $this->blocks);
        }
        throw new Exception('never get to this ContentValue::blocks');
    }

    /**
     * @param array
     * @return bool
     * @throws Exception
     */
    public static function validateBlocks(array $value): bool {
        if (!is_array($value)) {
            throw new Exception("Attribute Error:ContentValue::blocks");
        }
        array_walk($value, function($value_v) {
            $value_v->validate();
        });
        return true;
    }

    /**
     * @throws Exception
     * @return array
     */
    public function getBlocks(): array {
        if (ContentValue::validateBlocks($this->blocks))  {
            return $this->blocks;
        }
        throw new Exception('never get to getBlocks ContentValue::blocks');
    }

    /**
     * @return array
     */
    public static function sampleBlocks(): array {
        return  array(
            BlockElement::sample() /*31:*/
        ); /* 31:blocks*/
    }

    /**
     * @param stdClass $value
     * @throws Exception
     * @return stdClass
     */
    public static function fromFootnotes(stdClass $value): stdClass {
        function from($my): stdClass {
            $out = new stdClass();
            foreach ($my as $k => $v) {
                $out->$k = $v; /*string*/
            }
            return $out;
        }
        return from($value);
    }

    /**
     * @throws Exception
     * @return stdClass
     */
    public function toFootnotes(): stdClass {
        if (ContentValue::validateFootnotes($this->footnotes))  {
            function to($my): stdClass {
                $out = new stdClass();
                foreach ($my as $k => $v) {
                    $my->$k = $v; /*string*/
                }
                return $out;
            }
            return to($this->footnotes);
        }
        throw new Exception('never get to this ContentValue::footnotes');
    }

    /**
     * @param stdClass
     * @return bool
     * @throws Exception
     */
    public static function validateFootnotes(stdClass $value): bool {
        foreach ($value as $k => $v) {
            if (!is_string($v)) {
                throw new Exception("Attribute Error:ContentValue::footnotes");
            }
        }
        return true;
    }

    /**
     * @throws Exception
     * @return stdClass
     */
    public function getFootnotes(): stdClass {
        if (ContentValue::validateFootnotes($this->footnotes))  {
            return $this->footnotes;
        }
        throw new Exception('never get to getFootnotes ContentValue::footnotes');
    }

    /**
     * @return stdClass
     */
    public static function sampleFootnotes(): stdClass {
        function sample(): stdClass {
            $out = new stdClass();
            $out->{'ContentValue'} = 'ContentValue::footnotes::32'; /*32:footnotes*/
            return $out;
        }
        return sample();
    }

    /**
     * @param array $value
     * @throws Exception
     * @return array
     */
    public static function fromLayout(array $value): array {
        return  array_map(function ($value) {
            return  array_map(function ($value) {
                return $value; /*string*/
            }, $value);
        }, $value);
    }

    /**
     * @throws Exception
     * @return array
     */
    public function toLayout(): array {
        if (ContentValue::validateLayout($this->layout))  {
            return array_map(function ($value) {
                return array_map(function ($value) {
                    return $value; /*string*/
                }, $value);
            }, $this->layout);
        }
        throw new Exception('never get to this ContentValue::layout');
    }

    /**
     * @param array
     * @return bool
     * @throws Exception
     */
    public static function validateLayout(array $value): bool {
        if (!is_array($value)) {
            throw new Exception("Attribute Error:ContentValue::layout");
        }
        array_walk($value, function($value_v) {
            if (!is_array($value_v)) {
                throw new Exception("Attribute Error:ContentValue::layout");
            }
            array_walk($value_v, function($value_v_v) {
                if (!is_string($value_v_v)) {
                    throw new Exception("Attribute Error:ContentValue::layout");
                }
            });
        });
        return true;
    }

    /**
     * @throws Exception
     * @return array
     */
    public function getLayout(): array {
        if (ContentValue::validateLayout($this->layout))  {
            return $this->layout;
        }
        throw new Exception('never get to getLayout ContentValue::layout');
    }

    /**
     * @return array
     */
    public static function sampleLayout(): array {
        return  array(
             array(
                'ContentValue::::33' /*33:*/
            ); /* 33:*/
        ); /* 33:layout*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromTitle(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toTitle(): string {
        if (ContentValue::validateTitle($this->title))  {
            return $this->title; /*string*/
        }
        throw new Exception('never get to this ContentValue::title');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateTitle(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:ContentValue::title");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getTitle(): string {
        if (ContentValue::validateTitle($this->title))  {
            return $this->title;
        }
        throw new Exception('never get to getTitle ContentValue::title');
    }

    /**
     * @return string
     */
    public static function sampleTitle(): string {
        return 'ContentValue::title::34'; /*34:title*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return ContentValue::validateBlocks($this->blocks)
        || ContentValue::validateFootnotes($this->footnotes)
        || ContentValue::validateLayout($this->layout)
        || ContentValue::validateTitle($this->title);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'blocks'} = $this->toBlocks();
        $out->{'footnotes'} = $this->toFootnotes();
        $out->{'layout'} = $this->toLayout();
        $out->{'title'} = $this->toTitle();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return ContentValue
     * @throws Exception
     */
    public static function from(stdClass $obj): ContentValue {
        return new ContentValue(
         ContentValue::fromBlocks($obj->{'blocks'})
        ,ContentValue::fromFootnotes($obj->{'footnotes'})
        ,ContentValue::fromLayout($obj->{'layout'})
        ,ContentValue::fromTitle($obj->{'title'})
        );
    }

    /**
     * @return ContentValue
     */
    public static function sample(): ContentValue {
        return new ContentValue(
         ContentValue::sampleBlocks()
        ,ContentValue::sampleFootnotes()
        ,ContentValue::sampleLayout()
        ,ContentValue::sampleTitle()
        );
    }
}

// This is a autogenerated file:BlockElement

class BlockElement {
    private string $alt; // json:alt Required
    private bool $analyzed; // json:analyzed Required
    private string $anchor; // json:anchor Required
    private Attributes $attributes; // json:attributes Required
    private string $caption; // json:caption Required
    private Colors $colors; // json:colors Required
    private string $content; // json:content Required
    private string $contentType; // json:contentType Required
    private Dimensions $dimensions; // json:dimensions Required
    private string $distSource; // json:distSource Required
    private float $duration; // json:duration Required
    private bool $hasSound; // json:hasSound Required
    private string $id; // json:id Required
    private int $index; // json:index Required
    private bool $online; // json:online Required
    private string $relativeSource; // json:relativeSource Required
    private int $size; // json:size Required
    private string $text; // json:text Required
    private Thumbnails $thumbnails; // json:thumbnails Required
    private string $thumbnailsBuiltAt; // json:thumbnailsBuiltAt Required
    private string $title; // json:title Required
    private string $type; // json:type Required
    private string $url; // json:url Required

    /**
     * @param string $alt
     * @param bool $analyzed
     * @param string $anchor
     * @param Attributes $attributes
     * @param string $caption
     * @param Colors $colors
     * @param string $content
     * @param string $contentType
     * @param Dimensions $dimensions
     * @param string $distSource
     * @param float $duration
     * @param bool $hasSound
     * @param string $id
     * @param int $index
     * @param bool $online
     * @param string $relativeSource
     * @param int $size
     * @param string $text
     * @param Thumbnails $thumbnails
     * @param string $thumbnailsBuiltAt
     * @param string $title
     * @param string $type
     * @param string $url
     */
    public function __construct(string $alt, bool $analyzed, string $anchor, Attributes $attributes, string $caption, Colors $colors, string $content, string $contentType, Dimensions $dimensions, string $distSource, float $duration, bool $hasSound, string $id, int $index, bool $online, string $relativeSource, int $size, string $text, Thumbnails $thumbnails, string $thumbnailsBuiltAt, string $title, string $type, string $url) {
        $this->alt = $alt;
        $this->analyzed = $analyzed;
        $this->anchor = $anchor;
        $this->attributes = $attributes;
        $this->caption = $caption;
        $this->colors = $colors;
        $this->content = $content;
        $this->contentType = $contentType;
        $this->dimensions = $dimensions;
        $this->distSource = $distSource;
        $this->duration = $duration;
        $this->hasSound = $hasSound;
        $this->id = $id;
        $this->index = $index;
        $this->online = $online;
        $this->relativeSource = $relativeSource;
        $this->size = $size;
        $this->text = $text;
        $this->thumbnails = $thumbnails;
        $this->thumbnailsBuiltAt = $thumbnailsBuiltAt;
        $this->title = $title;
        $this->type = $type;
        $this->url = $url;
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromAlt(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toAlt(): string {
        if (BlockElement::validateAlt($this->alt))  {
            return $this->alt; /*string*/
        }
        throw new Exception('never get to this BlockElement::alt');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateAlt(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:BlockElement::alt");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getAlt(): string {
        if (BlockElement::validateAlt($this->alt))  {
            return $this->alt;
        }
        throw new Exception('never get to getAlt BlockElement::alt');
    }

    /**
     * @return string
     */
    public static function sampleAlt(): string {
        return 'BlockElement::alt::31'; /*31:alt*/
    }

    /**
     * whether the media has been analyzed
     *
     * @param bool $value
     * @throws Exception
     * @return bool
     */
    public static function fromAnalyzed(bool $value): bool {
        return $value; /*bool*/
    }

    /**
     * whether the media has been analyzed
     *
     * @throws Exception
     * @return bool
     */
    public function toAnalyzed(): bool {
        if (BlockElement::validateAnalyzed($this->analyzed))  {
            return $this->analyzed; /*bool*/
        }
        throw new Exception('never get to this BlockElement::analyzed');
    }

    /**
     * whether the media has been analyzed
     *
     * @param bool
     * @return bool
     * @throws Exception
     */
    public static function validateAnalyzed(bool $value): bool {
        if (!is_bool($value)) {
            throw new Exception("Attribute Error:BlockElement::analyzed");
        }
        return true;
    }

    /**
     * whether the media has been analyzed
     *
     * @throws Exception
     * @return bool
     */
    public function getAnalyzed(): bool {
        if (BlockElement::validateAnalyzed($this->analyzed))  {
            return $this->analyzed;
        }
        throw new Exception('never get to getAnalyzed BlockElement::analyzed');
    }

    /**
     * whether the media has been analyzed
     *
     * @return bool
     */
    public static function sampleAnalyzed(): bool {
        return true; /*32:analyzed*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromAnchor(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toAnchor(): string {
        if (BlockElement::validateAnchor($this->anchor))  {
            return $this->anchor; /*string*/
        }
        throw new Exception('never get to this BlockElement::anchor');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateAnchor(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:BlockElement::anchor");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getAnchor(): string {
        if (BlockElement::validateAnchor($this->anchor))  {
            return $this->anchor;
        }
        throw new Exception('never get to getAnchor BlockElement::anchor');
    }

    /**
     * @return string
     */
    public static function sampleAnchor(): string {
        return 'BlockElement::anchor::33'; /*33:anchor*/
    }

    /**
     * @param stdClass $value
     * @throws Exception
     * @return Attributes
     */
    public static function fromAttributes(stdClass $value): Attributes {
        return Attributes::from($value); /*class*/
    }

    /**
     * @throws Exception
     * @return stdClass
     */
    public function toAttributes(): stdClass {
        if (BlockElement::validateAttributes($this->attributes))  {
            return $this->attributes->to(); /*class*/
        }
        throw new Exception('never get to this BlockElement::attributes');
    }

    /**
     * @param Attributes
     * @return bool
     * @throws Exception
     */
    public static function validateAttributes(Attributes $value): bool {
        $value->validate();
        return true;
    }

    /**
     * @throws Exception
     * @return Attributes
     */
    public function getAttributes(): Attributes {
        if (BlockElement::validateAttributes($this->attributes))  {
            return $this->attributes;
        }
        throw new Exception('never get to getAttributes BlockElement::attributes');
    }

    /**
     * @return Attributes
     */
    public static function sampleAttributes(): Attributes {
        return Attributes::sample(); /*34:attributes*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromCaption(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toCaption(): string {
        if (BlockElement::validateCaption($this->caption))  {
            return $this->caption; /*string*/
        }
        throw new Exception('never get to this BlockElement::caption');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateCaption(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:BlockElement::caption");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getCaption(): string {
        if (BlockElement::validateCaption($this->caption))  {
            return $this->caption;
        }
        throw new Exception('never get to getCaption BlockElement::caption');
    }

    /**
     * @return string
     */
    public static function sampleCaption(): string {
        return 'BlockElement::caption::35'; /*35:caption*/
    }

    /**
     * @param stdClass $value
     * @throws Exception
     * @return Colors
     */
    public static function fromColors(stdClass $value): Colors {
        return Colors::from($value); /*class*/
    }

    /**
     * @throws Exception
     * @return stdClass
     */
    public function toColors(): stdClass {
        if (BlockElement::validateColors($this->colors))  {
            return $this->colors->to(); /*class*/
        }
        throw new Exception('never get to this BlockElement::colors');
    }

    /**
     * @param Colors
     * @return bool
     * @throws Exception
     */
    public static function validateColors(Colors $value): bool {
        $value->validate();
        return true;
    }

    /**
     * @throws Exception
     * @return Colors
     */
    public function getColors(): Colors {
        if (BlockElement::validateColors($this->colors))  {
            return $this->colors;
        }
        throw new Exception('never get to getColors BlockElement::colors');
    }

    /**
     * @return Colors
     */
    public static function sampleColors(): Colors {
        return Colors::sample(); /*36:colors*/
    }

    /**
     * html
     *
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromContent(string $value): string {
        return $value; /*string*/
    }

    /**
     * html
     *
     * @throws Exception
     * @return string
     */
    public function toContent(): string {
        if (BlockElement::validateContent($this->content))  {
            return $this->content; /*string*/
        }
        throw new Exception('never get to this BlockElement::content');
    }

    /**
     * html
     *
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateContent(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:BlockElement::content");
        }
        return true;
    }

    /**
     * html
     *
     * @throws Exception
     * @return string
     */
    public function getContent(): string {
        if (BlockElement::validateContent($this->content))  {
            return $this->content;
        }
        throw new Exception('never get to getContent BlockElement::content');
    }

    /**
     * html
     *
     * @return string
     */
    public static function sampleContent(): string {
        return 'BlockElement::content::37'; /*37:content*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromContentType(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toContentType(): string {
        if (BlockElement::validateContentType($this->contentType))  {
            return $this->contentType; /*string*/
        }
        throw new Exception('never get to this BlockElement::contentType');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateContentType(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:BlockElement::contentType");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getContentType(): string {
        if (BlockElement::validateContentType($this->contentType))  {
            return $this->contentType;
        }
        throw new Exception('never get to getContentType BlockElement::contentType');
    }

    /**
     * @return string
     */
    public static function sampleContentType(): string {
        return 'BlockElement::contentType::38'; /*38:contentType*/
    }

    /**
     * @param stdClass $value
     * @throws Exception
     * @return Dimensions
     */
    public static function fromDimensions(stdClass $value): Dimensions {
        return Dimensions::from($value); /*class*/
    }

    /**
     * @throws Exception
     * @return stdClass
     */
    public function toDimensions(): stdClass {
        if (BlockElement::validateDimensions($this->dimensions))  {
            return $this->dimensions->to(); /*class*/
        }
        throw new Exception('never get to this BlockElement::dimensions');
    }

    /**
     * @param Dimensions
     * @return bool
     * @throws Exception
     */
    public static function validateDimensions(Dimensions $value): bool {
        $value->validate();
        return true;
    }

    /**
     * @throws Exception
     * @return Dimensions
     */
    public function getDimensions(): Dimensions {
        if (BlockElement::validateDimensions($this->dimensions))  {
            return $this->dimensions;
        }
        throw new Exception('never get to getDimensions BlockElement::dimensions');
    }

    /**
     * @return Dimensions
     */
    public static function sampleDimensions(): Dimensions {
        return Dimensions::sample(); /*39:dimensions*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromDistSource(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toDistSource(): string {
        if (BlockElement::validateDistSource($this->distSource))  {
            return $this->distSource; /*string*/
        }
        throw new Exception('never get to this BlockElement::distSource');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateDistSource(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:BlockElement::distSource");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getDistSource(): string {
        if (BlockElement::validateDistSource($this->distSource))  {
            return $this->distSource;
        }
        throw new Exception('never get to getDistSource BlockElement::distSource');
    }

    /**
     * @return string
     */
    public static function sampleDistSource(): string {
        return 'BlockElement::distSource::40'; /*40:distSource*/
    }

    /**
     * in seconds
     *
     * @param float $value
     * @throws Exception
     * @return float
     */
    public static function fromDuration(float $value): float {
        return $value; /*float*/
    }

    /**
     * in seconds
     *
     * @throws Exception
     * @return float
     */
    public function toDuration(): float {
        if (BlockElement::validateDuration($this->duration))  {
            return $this->duration; /*float*/
        }
        throw new Exception('never get to this BlockElement::duration');
    }

    /**
     * in seconds
     *
     * @param float
     * @return bool
     * @throws Exception
     */
    public static function validateDuration(float $value): bool {
        if (!is_float($value)) {
            throw new Exception("Attribute Error:BlockElement::duration");
        }
        return true;
    }

    /**
     * in seconds
     *
     * @throws Exception
     * @return float
     */
    public function getDuration(): float {
        if (BlockElement::validateDuration($this->duration))  {
            return $this->duration;
        }
        throw new Exception('never get to getDuration BlockElement::duration');
    }

    /**
     * in seconds
     *
     * @return float
     */
    public static function sampleDuration(): float {
        return 41.041; /*41:duration*/
    }

    /**
     * @param bool $value
     * @throws Exception
     * @return bool
     */
    public static function fromHasSound(bool $value): bool {
        return $value; /*bool*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function toHasSound(): bool {
        if (BlockElement::validateHasSound($this->hasSound))  {
            return $this->hasSound; /*bool*/
        }
        throw new Exception('never get to this BlockElement::hasSound');
    }

    /**
     * @param bool
     * @return bool
     * @throws Exception
     */
    public static function validateHasSound(bool $value): bool {
        if (!is_bool($value)) {
            throw new Exception("Attribute Error:BlockElement::hasSound");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function getHasSound(): bool {
        if (BlockElement::validateHasSound($this->hasSound))  {
            return $this->hasSound;
        }
        throw new Exception('never get to getHasSound BlockElement::hasSound');
    }

    /**
     * @return bool
     */
    public static function sampleHasSound(): bool {
        return true; /*42:hasSound*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromID(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toID(): string {
        if (BlockElement::validateID($this->id))  {
            return $this->id; /*string*/
        }
        throw new Exception('never get to this BlockElement::id');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateID(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:BlockElement::id");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getID(): string {
        if (BlockElement::validateID($this->id))  {
            return $this->id;
        }
        throw new Exception('never get to getID BlockElement::id');
    }

    /**
     * @return string
     */
    public static function sampleID(): string {
        return 'BlockElement::id::43'; /*43:id*/
    }

    /**
     * @param int $value
     * @throws Exception
     * @return int
     */
    public static function fromIndex(int $value): int {
        return $value; /*int*/
    }

    /**
     * @throws Exception
     * @return int
     */
    public function toIndex(): int {
        if (BlockElement::validateIndex($this->index))  {
            return $this->index; /*int*/
        }
        throw new Exception('never get to this BlockElement::index');
    }

    /**
     * @param int
     * @return bool
     * @throws Exception
     */
    public static function validateIndex(int $value): bool {
        if (!is_integer($value)) {
            throw new Exception("Attribute Error:BlockElement::index");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return int
     */
    public function getIndex(): int {
        if (BlockElement::validateIndex($this->index))  {
            return $this->index;
        }
        throw new Exception('never get to getIndex BlockElement::index');
    }

    /**
     * @return int
     */
    public static function sampleIndex(): int {
        return 44; /*44:index*/
    }

    /**
     * @param bool $value
     * @throws Exception
     * @return bool
     */
    public static function fromOnline(bool $value): bool {
        return $value; /*bool*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function toOnline(): bool {
        if (BlockElement::validateOnline($this->online))  {
            return $this->online; /*bool*/
        }
        throw new Exception('never get to this BlockElement::online');
    }

    /**
     * @param bool
     * @return bool
     * @throws Exception
     */
    public static function validateOnline(bool $value): bool {
        if (!is_bool($value)) {
            throw new Exception("Attribute Error:BlockElement::online");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function getOnline(): bool {
        if (BlockElement::validateOnline($this->online))  {
            return $this->online;
        }
        throw new Exception('never get to getOnline BlockElement::online');
    }

    /**
     * @return bool
     */
    public static function sampleOnline(): bool {
        return true; /*45:online*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromRelativeSource(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toRelativeSource(): string {
        if (BlockElement::validateRelativeSource($this->relativeSource))  {
            return $this->relativeSource; /*string*/
        }
        throw new Exception('never get to this BlockElement::relativeSource');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateRelativeSource(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:BlockElement::relativeSource");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getRelativeSource(): string {
        if (BlockElement::validateRelativeSource($this->relativeSource))  {
            return $this->relativeSource;
        }
        throw new Exception('never get to getRelativeSource BlockElement::relativeSource');
    }

    /**
     * @return string
     */
    public static function sampleRelativeSource(): string {
        return 'BlockElement::relativeSource::46'; /*46:relativeSource*/
    }

    /**
     * in bytes
     *
     * @param int $value
     * @throws Exception
     * @return int
     */
    public static function fromSize(int $value): int {
        return $value; /*int*/
    }

    /**
     * in bytes
     *
     * @throws Exception
     * @return int
     */
    public function toSize(): int {
        if (BlockElement::validateSize($this->size))  {
            return $this->size; /*int*/
        }
        throw new Exception('never get to this BlockElement::size');
    }

    /**
     * in bytes
     *
     * @param int
     * @return bool
     * @throws Exception
     */
    public static function validateSize(int $value): bool {
        if (!is_integer($value)) {
            throw new Exception("Attribute Error:BlockElement::size");
        }
        return true;
    }

    /**
     * in bytes
     *
     * @throws Exception
     * @return int
     */
    public function getSize(): int {
        if (BlockElement::validateSize($this->size))  {
            return $this->size;
        }
        throw new Exception('never get to getSize BlockElement::size');
    }

    /**
     * in bytes
     *
     * @return int
     */
    public static function sampleSize(): int {
        return 47; /*47:size*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromText(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toText(): string {
        if (BlockElement::validateText($this->text))  {
            return $this->text; /*string*/
        }
        throw new Exception('never get to this BlockElement::text');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateText(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:BlockElement::text");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getText(): string {
        if (BlockElement::validateText($this->text))  {
            return $this->text;
        }
        throw new Exception('never get to getText BlockElement::text');
    }

    /**
     * @return string
     */
    public static function sampleText(): string {
        return 'BlockElement::text::48'; /*48:text*/
    }

    /**
     * @param stdClass $value
     * @throws Exception
     * @return Thumbnails
     */
    public static function fromThumbnails(stdClass $value): Thumbnails {
        return Thumbnails::from($value); /*class*/
    }

    /**
     * @throws Exception
     * @return stdClass
     */
    public function toThumbnails(): stdClass {
        if (BlockElement::validateThumbnails($this->thumbnails))  {
            return $this->thumbnails->to(); /*class*/
        }
        throw new Exception('never get to this BlockElement::thumbnails');
    }

    /**
     * @param Thumbnails
     * @return bool
     * @throws Exception
     */
    public static function validateThumbnails(Thumbnails $value): bool {
        $value->validate();
        return true;
    }

    /**
     * @throws Exception
     * @return Thumbnails
     */
    public function getThumbnails(): Thumbnails {
        if (BlockElement::validateThumbnails($this->thumbnails))  {
            return $this->thumbnails;
        }
        throw new Exception('never get to getThumbnails BlockElement::thumbnails');
    }

    /**
     * @return Thumbnails
     */
    public static function sampleThumbnails(): Thumbnails {
        return Thumbnails::sample(); /*49:thumbnails*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromThumbnailsBuiltAt(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toThumbnailsBuiltAt(): string {
        if (BlockElement::validateThumbnailsBuiltAt($this->thumbnailsBuiltAt))  {
            return $this->thumbnailsBuiltAt; /*string*/
        }
        throw new Exception('never get to this BlockElement::thumbnailsBuiltAt');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateThumbnailsBuiltAt(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:BlockElement::thumbnailsBuiltAt");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getThumbnailsBuiltAt(): string {
        if (BlockElement::validateThumbnailsBuiltAt($this->thumbnailsBuiltAt))  {
            return $this->thumbnailsBuiltAt;
        }
        throw new Exception('never get to getThumbnailsBuiltAt BlockElement::thumbnailsBuiltAt');
    }

    /**
     * @return string
     */
    public static function sampleThumbnailsBuiltAt(): string {
        return 'BlockElement::thumbnailsBuiltAt::50'; /*50:thumbnailsBuiltAt*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromTitle(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toTitle(): string {
        if (BlockElement::validateTitle($this->title))  {
            return $this->title; /*string*/
        }
        throw new Exception('never get to this BlockElement::title');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateTitle(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:BlockElement::title");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getTitle(): string {
        if (BlockElement::validateTitle($this->title))  {
            return $this->title;
        }
        throw new Exception('never get to getTitle BlockElement::title');
    }

    /**
     * @return string
     */
    public static function sampleTitle(): string {
        return 'BlockElement::title::51'; /*51:title*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromType(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toType(): string {
        if (BlockElement::validateType($this->type))  {
            return $this->type; /*string*/
        }
        throw new Exception('never get to this BlockElement::type');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateType(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:BlockElement::type");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getType(): string {
        if (BlockElement::validateType($this->type))  {
            return $this->type;
        }
        throw new Exception('never get to getType BlockElement::type');
    }

    /**
     * @return string
     */
    public static function sampleType(): string {
        return 'BlockElement::type::52'; /*52:type*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromURL(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toURL(): string {
        if (BlockElement::validateURL($this->url))  {
            return $this->url; /*string*/
        }
        throw new Exception('never get to this BlockElement::url');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateURL(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:BlockElement::url");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getURL(): string {
        if (BlockElement::validateURL($this->url))  {
            return $this->url;
        }
        throw new Exception('never get to getURL BlockElement::url');
    }

    /**
     * @return string
     */
    public static function sampleURL(): string {
        return 'BlockElement::url::53'; /*53:url*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return BlockElement::validateAlt($this->alt)
        || BlockElement::validateAnalyzed($this->analyzed)
        || BlockElement::validateAnchor($this->anchor)
        || BlockElement::validateAttributes($this->attributes)
        || BlockElement::validateCaption($this->caption)
        || BlockElement::validateColors($this->colors)
        || BlockElement::validateContent($this->content)
        || BlockElement::validateContentType($this->contentType)
        || BlockElement::validateDimensions($this->dimensions)
        || BlockElement::validateDistSource($this->distSource)
        || BlockElement::validateDuration($this->duration)
        || BlockElement::validateHasSound($this->hasSound)
        || BlockElement::validateID($this->id)
        || BlockElement::validateIndex($this->index)
        || BlockElement::validateOnline($this->online)
        || BlockElement::validateRelativeSource($this->relativeSource)
        || BlockElement::validateSize($this->size)
        || BlockElement::validateText($this->text)
        || BlockElement::validateThumbnails($this->thumbnails)
        || BlockElement::validateThumbnailsBuiltAt($this->thumbnailsBuiltAt)
        || BlockElement::validateTitle($this->title)
        || BlockElement::validateType($this->type)
        || BlockElement::validateURL($this->url);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'alt'} = $this->toAlt();
        $out->{'analyzed'} = $this->toAnalyzed();
        $out->{'anchor'} = $this->toAnchor();
        $out->{'attributes'} = $this->toAttributes();
        $out->{'caption'} = $this->toCaption();
        $out->{'colors'} = $this->toColors();
        $out->{'content'} = $this->toContent();
        $out->{'contentType'} = $this->toContentType();
        $out->{'dimensions'} = $this->toDimensions();
        $out->{'distSource'} = $this->toDistSource();
        $out->{'duration'} = $this->toDuration();
        $out->{'hasSound'} = $this->toHasSound();
        $out->{'id'} = $this->toID();
        $out->{'index'} = $this->toIndex();
        $out->{'online'} = $this->toOnline();
        $out->{'relativeSource'} = $this->toRelativeSource();
        $out->{'size'} = $this->toSize();
        $out->{'text'} = $this->toText();
        $out->{'thumbnails'} = $this->toThumbnails();
        $out->{'thumbnailsBuiltAt'} = $this->toThumbnailsBuiltAt();
        $out->{'title'} = $this->toTitle();
        $out->{'type'} = $this->toType();
        $out->{'url'} = $this->toURL();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return BlockElement
     * @throws Exception
     */
    public static function from(stdClass $obj): BlockElement {
        return new BlockElement(
         BlockElement::fromAlt($obj->{'alt'})
        ,BlockElement::fromAnalyzed($obj->{'analyzed'})
        ,BlockElement::fromAnchor($obj->{'anchor'})
        ,BlockElement::fromAttributes($obj->{'attributes'})
        ,BlockElement::fromCaption($obj->{'caption'})
        ,BlockElement::fromColors($obj->{'colors'})
        ,BlockElement::fromContent($obj->{'content'})
        ,BlockElement::fromContentType($obj->{'contentType'})
        ,BlockElement::fromDimensions($obj->{'dimensions'})
        ,BlockElement::fromDistSource($obj->{'distSource'})
        ,BlockElement::fromDuration($obj->{'duration'})
        ,BlockElement::fromHasSound($obj->{'hasSound'})
        ,BlockElement::fromID($obj->{'id'})
        ,BlockElement::fromIndex($obj->{'index'})
        ,BlockElement::fromOnline($obj->{'online'})
        ,BlockElement::fromRelativeSource($obj->{'relativeSource'})
        ,BlockElement::fromSize($obj->{'size'})
        ,BlockElement::fromText($obj->{'text'})
        ,BlockElement::fromThumbnails($obj->{'thumbnails'})
        ,BlockElement::fromThumbnailsBuiltAt($obj->{'thumbnailsBuiltAt'})
        ,BlockElement::fromTitle($obj->{'title'})
        ,BlockElement::fromType($obj->{'type'})
        ,BlockElement::fromURL($obj->{'url'})
        );
    }

    /**
     * @return BlockElement
     */
    public static function sample(): BlockElement {
        return new BlockElement(
         BlockElement::sampleAlt()
        ,BlockElement::sampleAnalyzed()
        ,BlockElement::sampleAnchor()
        ,BlockElement::sampleAttributes()
        ,BlockElement::sampleCaption()
        ,BlockElement::sampleColors()
        ,BlockElement::sampleContent()
        ,BlockElement::sampleContentType()
        ,BlockElement::sampleDimensions()
        ,BlockElement::sampleDistSource()
        ,BlockElement::sampleDuration()
        ,BlockElement::sampleHasSound()
        ,BlockElement::sampleID()
        ,BlockElement::sampleIndex()
        ,BlockElement::sampleOnline()
        ,BlockElement::sampleRelativeSource()
        ,BlockElement::sampleSize()
        ,BlockElement::sampleText()
        ,BlockElement::sampleThumbnails()
        ,BlockElement::sampleThumbnailsBuiltAt()
        ,BlockElement::sampleTitle()
        ,BlockElement::sampleType()
        ,BlockElement::sampleURL()
        );
    }
}

// This is a autogenerated file:Attributes

class Attributes {
    private bool $autoplay; // json:autoplay Required
    private bool $controls; // json:controls Required
    private bool $loop; // json:loop Required
    private bool $muted; // json:muted Required
    private bool $playsinline; // json:playsinline Required

    /**
     * @param bool $autoplay
     * @param bool $controls
     * @param bool $loop
     * @param bool $muted
     * @param bool $playsinline
     */
    public function __construct(bool $autoplay, bool $controls, bool $loop, bool $muted, bool $playsinline) {
        $this->autoplay = $autoplay;
        $this->controls = $controls;
        $this->loop = $loop;
        $this->muted = $muted;
        $this->playsinline = $playsinline;
    }

    /**
     * Controlled with attribute character > (adds)
     *
     * @param bool $value
     * @throws Exception
     * @return bool
     */
    public static function fromAutoplay(bool $value): bool {
        return $value; /*bool*/
    }

    /**
     * Controlled with attribute character > (adds)
     *
     * @throws Exception
     * @return bool
     */
    public function toAutoplay(): bool {
        if (Attributes::validateAutoplay($this->autoplay))  {
            return $this->autoplay; /*bool*/
        }
        throw new Exception('never get to this Attributes::autoplay');
    }

    /**
     * Controlled with attribute character > (adds)
     *
     * @param bool
     * @return bool
     * @throws Exception
     */
    public static function validateAutoplay(bool $value): bool {
        if (!is_bool($value)) {
            throw new Exception("Attribute Error:Attributes::autoplay");
        }
        return true;
    }

    /**
     * Controlled with attribute character > (adds)
     *
     * @throws Exception
     * @return bool
     */
    public function getAutoplay(): bool {
        if (Attributes::validateAutoplay($this->autoplay))  {
            return $this->autoplay;
        }
        throw new Exception('never get to getAutoplay Attributes::autoplay');
    }

    /**
     * Controlled with attribute character > (adds)
     *
     * @return bool
     */
    public static function sampleAutoplay(): bool {
        return true; /*31:autoplay*/
    }

    /**
     * Controlled with attribute character = (removes)
     *
     * @param bool $value
     * @throws Exception
     * @return bool
     */
    public static function fromControls(bool $value): bool {
        return $value; /*bool*/
    }

    /**
     * Controlled with attribute character = (removes)
     *
     * @throws Exception
     * @return bool
     */
    public function toControls(): bool {
        if (Attributes::validateControls($this->controls))  {
            return $this->controls; /*bool*/
        }
        throw new Exception('never get to this Attributes::controls');
    }

    /**
     * Controlled with attribute character = (removes)
     *
     * @param bool
     * @return bool
     * @throws Exception
     */
    public static function validateControls(bool $value): bool {
        if (!is_bool($value)) {
            throw new Exception("Attribute Error:Attributes::controls");
        }
        return true;
    }

    /**
     * Controlled with attribute character = (removes)
     *
     * @throws Exception
     * @return bool
     */
    public function getControls(): bool {
        if (Attributes::validateControls($this->controls))  {
            return $this->controls;
        }
        throw new Exception('never get to getControls Attributes::controls');
    }

    /**
     * Controlled with attribute character = (removes)
     *
     * @return bool
     */
    public static function sampleControls(): bool {
        return true; /*32:controls*/
    }

    /**
     * Controlled with attribute character ~ (adds)
     *
     * @param bool $value
     * @throws Exception
     * @return bool
     */
    public static function fromLoop(bool $value): bool {
        return $value; /*bool*/
    }

    /**
     * Controlled with attribute character ~ (adds)
     *
     * @throws Exception
     * @return bool
     */
    public function toLoop(): bool {
        if (Attributes::validateLoop($this->loop))  {
            return $this->loop; /*bool*/
        }
        throw new Exception('never get to this Attributes::loop');
    }

    /**
     * Controlled with attribute character ~ (adds)
     *
     * @param bool
     * @return bool
     * @throws Exception
     */
    public static function validateLoop(bool $value): bool {
        if (!is_bool($value)) {
            throw new Exception("Attribute Error:Attributes::loop");
        }
        return true;
    }

    /**
     * Controlled with attribute character ~ (adds)
     *
     * @throws Exception
     * @return bool
     */
    public function getLoop(): bool {
        if (Attributes::validateLoop($this->loop))  {
            return $this->loop;
        }
        throw new Exception('never get to getLoop Attributes::loop');
    }

    /**
     * Controlled with attribute character ~ (adds)
     *
     * @return bool
     */
    public static function sampleLoop(): bool {
        return true; /*33:loop*/
    }

    /**
     * Controlled with attribute character > (adds)
     *
     * @param bool $value
     * @throws Exception
     * @return bool
     */
    public static function fromMuted(bool $value): bool {
        return $value; /*bool*/
    }

    /**
     * Controlled with attribute character > (adds)
     *
     * @throws Exception
     * @return bool
     */
    public function toMuted(): bool {
        if (Attributes::validateMuted($this->muted))  {
            return $this->muted; /*bool*/
        }
        throw new Exception('never get to this Attributes::muted');
    }

    /**
     * Controlled with attribute character > (adds)
     *
     * @param bool
     * @return bool
     * @throws Exception
     */
    public static function validateMuted(bool $value): bool {
        if (!is_bool($value)) {
            throw new Exception("Attribute Error:Attributes::muted");
        }
        return true;
    }

    /**
     * Controlled with attribute character > (adds)
     *
     * @throws Exception
     * @return bool
     */
    public function getMuted(): bool {
        if (Attributes::validateMuted($this->muted))  {
            return $this->muted;
        }
        throw new Exception('never get to getMuted Attributes::muted');
    }

    /**
     * Controlled with attribute character > (adds)
     *
     * @return bool
     */
    public static function sampleMuted(): bool {
        return true; /*34:muted*/
    }

    /**
     * Controlled with attribute character = (adds)
     *
     * @param bool $value
     * @throws Exception
     * @return bool
     */
    public static function fromPlaysinline(bool $value): bool {
        return $value; /*bool*/
    }

    /**
     * Controlled with attribute character = (adds)
     *
     * @throws Exception
     * @return bool
     */
    public function toPlaysinline(): bool {
        if (Attributes::validatePlaysinline($this->playsinline))  {
            return $this->playsinline; /*bool*/
        }
        throw new Exception('never get to this Attributes::playsinline');
    }

    /**
     * Controlled with attribute character = (adds)
     *
     * @param bool
     * @return bool
     * @throws Exception
     */
    public static function validatePlaysinline(bool $value): bool {
        if (!is_bool($value)) {
            throw new Exception("Attribute Error:Attributes::playsinline");
        }
        return true;
    }

    /**
     * Controlled with attribute character = (adds)
     *
     * @throws Exception
     * @return bool
     */
    public function getPlaysinline(): bool {
        if (Attributes::validatePlaysinline($this->playsinline))  {
            return $this->playsinline;
        }
        throw new Exception('never get to getPlaysinline Attributes::playsinline');
    }

    /**
     * Controlled with attribute character = (adds)
     *
     * @return bool
     */
    public static function samplePlaysinline(): bool {
        return true; /*35:playsinline*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return Attributes::validateAutoplay($this->autoplay)
        || Attributes::validateControls($this->controls)
        || Attributes::validateLoop($this->loop)
        || Attributes::validateMuted($this->muted)
        || Attributes::validatePlaysinline($this->playsinline);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'autoplay'} = $this->toAutoplay();
        $out->{'controls'} = $this->toControls();
        $out->{'loop'} = $this->toLoop();
        $out->{'muted'} = $this->toMuted();
        $out->{'playsinline'} = $this->toPlaysinline();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return Attributes
     * @throws Exception
     */
    public static function from(stdClass $obj): Attributes {
        return new Attributes(
         Attributes::fromAutoplay($obj->{'autoplay'})
        ,Attributes::fromControls($obj->{'controls'})
        ,Attributes::fromLoop($obj->{'loop'})
        ,Attributes::fromMuted($obj->{'muted'})
        ,Attributes::fromPlaysinline($obj->{'playsinline'})
        );
    }

    /**
     * @return Attributes
     */
    public static function sample(): Attributes {
        return new Attributes(
         Attributes::sampleAutoplay()
        ,Attributes::sampleControls()
        ,Attributes::sampleLoop()
        ,Attributes::sampleMuted()
        ,Attributes::samplePlaysinline()
        );
    }
}

// This is a autogenerated file:Colors

class Colors {
    private string $primary; // json:primary Required
    private string $secondary; // json:secondary Required
    private string $tertiary; // json:tertiary Required

    /**
     * @param string $primary
     * @param string $secondary
     * @param string $tertiary
     */
    public function __construct(string $primary, string $secondary, string $tertiary) {
        $this->primary = $primary;
        $this->secondary = $secondary;
        $this->tertiary = $tertiary;
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromPrimary(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toPrimary(): string {
        if (Colors::validatePrimary($this->primary))  {
            return $this->primary; /*string*/
        }
        throw new Exception('never get to this Colors::primary');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validatePrimary(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Colors::primary");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getPrimary(): string {
        if (Colors::validatePrimary($this->primary))  {
            return $this->primary;
        }
        throw new Exception('never get to getPrimary Colors::primary');
    }

    /**
     * @return string
     */
    public static function samplePrimary(): string {
        return 'Colors::primary::31'; /*31:primary*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromSecondary(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toSecondary(): string {
        if (Colors::validateSecondary($this->secondary))  {
            return $this->secondary; /*string*/
        }
        throw new Exception('never get to this Colors::secondary');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateSecondary(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Colors::secondary");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getSecondary(): string {
        if (Colors::validateSecondary($this->secondary))  {
            return $this->secondary;
        }
        throw new Exception('never get to getSecondary Colors::secondary');
    }

    /**
     * @return string
     */
    public static function sampleSecondary(): string {
        return 'Colors::secondary::32'; /*32:secondary*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromTertiary(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toTertiary(): string {
        if (Colors::validateTertiary($this->tertiary))  {
            return $this->tertiary; /*string*/
        }
        throw new Exception('never get to this Colors::tertiary');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateTertiary(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Colors::tertiary");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getTertiary(): string {
        if (Colors::validateTertiary($this->tertiary))  {
            return $this->tertiary;
        }
        throw new Exception('never get to getTertiary Colors::tertiary');
    }

    /**
     * @return string
     */
    public static function sampleTertiary(): string {
        return 'Colors::tertiary::33'; /*33:tertiary*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return Colors::validatePrimary($this->primary)
        || Colors::validateSecondary($this->secondary)
        || Colors::validateTertiary($this->tertiary);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'primary'} = $this->toPrimary();
        $out->{'secondary'} = $this->toSecondary();
        $out->{'tertiary'} = $this->toTertiary();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return Colors
     * @throws Exception
     */
    public static function from(stdClass $obj): Colors {
        return new Colors(
         Colors::fromPrimary($obj->{'primary'})
        ,Colors::fromSecondary($obj->{'secondary'})
        ,Colors::fromTertiary($obj->{'tertiary'})
        );
    }

    /**
     * @return Colors
     */
    public static function sample(): Colors {
        return new Colors(
         Colors::samplePrimary()
        ,Colors::sampleSecondary()
        ,Colors::sampleTertiary()
        );
    }
}

// This is a autogenerated file:Dimensions

class Dimensions {
    private float $aspectRatio; // json:aspectRatio Required
    private int $height; // json:height Required
    private int $width; // json:width Required

    /**
     * @param float $aspectRatio
     * @param int $height
     * @param int $width
     */
    public function __construct(float $aspectRatio, int $height, int $width) {
        $this->aspectRatio = $aspectRatio;
        $this->height = $height;
        $this->width = $width;
    }

    /**
     * width / height
     *
     * @param float $value
     * @throws Exception
     * @return float
     */
    public static function fromAspectRatio(float $value): float {
        return $value; /*float*/
    }

    /**
     * width / height
     *
     * @throws Exception
     * @return float
     */
    public function toAspectRatio(): float {
        if (Dimensions::validateAspectRatio($this->aspectRatio))  {
            return $this->aspectRatio; /*float*/
        }
        throw new Exception('never get to this Dimensions::aspectRatio');
    }

    /**
     * width / height
     *
     * @param float
     * @return bool
     * @throws Exception
     */
    public static function validateAspectRatio(float $value): bool {
        if (!is_float($value)) {
            throw new Exception("Attribute Error:Dimensions::aspectRatio");
        }
        return true;
    }

    /**
     * width / height
     *
     * @throws Exception
     * @return float
     */
    public function getAspectRatio(): float {
        if (Dimensions::validateAspectRatio($this->aspectRatio))  {
            return $this->aspectRatio;
        }
        throw new Exception('never get to getAspectRatio Dimensions::aspectRatio');
    }

    /**
     * width / height
     *
     * @return float
     */
    public static function sampleAspectRatio(): float {
        return 31.031; /*31:aspectRatio*/
    }

    /**
     * Height in pixels
     *
     * @param int $value
     * @throws Exception
     * @return int
     */
    public static function fromHeight(int $value): int {
        return $value; /*int*/
    }

    /**
     * Height in pixels
     *
     * @throws Exception
     * @return int
     */
    public function toHeight(): int {
        if (Dimensions::validateHeight($this->height))  {
            return $this->height; /*int*/
        }
        throw new Exception('never get to this Dimensions::height');
    }

    /**
     * Height in pixels
     *
     * @param int
     * @return bool
     * @throws Exception
     */
    public static function validateHeight(int $value): bool {
        if (!is_integer($value)) {
            throw new Exception("Attribute Error:Dimensions::height");
        }
        return true;
    }

    /**
     * Height in pixels
     *
     * @throws Exception
     * @return int
     */
    public function getHeight(): int {
        if (Dimensions::validateHeight($this->height))  {
            return $this->height;
        }
        throw new Exception('never get to getHeight Dimensions::height');
    }

    /**
     * Height in pixels
     *
     * @return int
     */
    public static function sampleHeight(): int {
        return 32; /*32:height*/
    }

    /**
     * Width in pixels
     *
     * @param int $value
     * @throws Exception
     * @return int
     */
    public static function fromWidth(int $value): int {
        return $value; /*int*/
    }

    /**
     * Width in pixels
     *
     * @throws Exception
     * @return int
     */
    public function toWidth(): int {
        if (Dimensions::validateWidth($this->width))  {
            return $this->width; /*int*/
        }
        throw new Exception('never get to this Dimensions::width');
    }

    /**
     * Width in pixels
     *
     * @param int
     * @return bool
     * @throws Exception
     */
    public static function validateWidth(int $value): bool {
        if (!is_integer($value)) {
            throw new Exception("Attribute Error:Dimensions::width");
        }
        return true;
    }

    /**
     * Width in pixels
     *
     * @throws Exception
     * @return int
     */
    public function getWidth(): int {
        if (Dimensions::validateWidth($this->width))  {
            return $this->width;
        }
        throw new Exception('never get to getWidth Dimensions::width');
    }

    /**
     * Width in pixels
     *
     * @return int
     */
    public static function sampleWidth(): int {
        return 33; /*33:width*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return Dimensions::validateAspectRatio($this->aspectRatio)
        || Dimensions::validateHeight($this->height)
        || Dimensions::validateWidth($this->width);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'aspectRatio'} = $this->toAspectRatio();
        $out->{'height'} = $this->toHeight();
        $out->{'width'} = $this->toWidth();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return Dimensions
     * @throws Exception
     */
    public static function from(stdClass $obj): Dimensions {
        return new Dimensions(
         Dimensions::fromAspectRatio($obj->{'aspectRatio'})
        ,Dimensions::fromHeight($obj->{'height'})
        ,Dimensions::fromWidth($obj->{'width'})
        );
    }

    /**
     * @return Dimensions
     */
    public static function sample(): Dimensions {
        return new Dimensions(
         Dimensions::sampleAspectRatio()
        ,Dimensions::sampleHeight()
        ,Dimensions::sampleWidth()
        );
    }
}

// This is a autogenerated file:Thumbnails

class Thumbnails {

    /**
     */
    public function __construct() {
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return Thumbnails
     * @throws Exception
     */
    public static function from(stdClass $obj): Thumbnails {
        return new Thumbnails(
        );
    }

    /**
     * @return Thumbnails
     */
    public static function sample(): Thumbnails {
        return new Thumbnails(
        );
    }
}

// This is a autogenerated file:Metadata

class Metadata {
    private stdClass $additionalMetadata; // json:additionalMetadata Required
    private array $aliases; // json:aliases Required
    private Colors $colors; // json:colors Required
    private DatabaseMetadataClass $databaseMetadata; // json:databaseMetadata Required
    private string $finished; // json:finished Required
    private array $madeWith; // json:madeWith Required
    private string $pageBackground; // json:pageBackground Required
    private bool $private; // json:private Required
    private string $started; // json:started Required
    private array $tags; // json:tags Required
    private string $thumbnail; // json:thumbnail Required
    private string $titleStyle; // json:titleStyle Required
    private bool $wip; // json:wip Required

    /**
     * @param stdClass $additionalMetadata
     * @param array $aliases
     * @param Colors $colors
     * @param DatabaseMetadataClass $databaseMetadata
     * @param string $finished
     * @param array $madeWith
     * @param string $pageBackground
     * @param bool $private
     * @param string $started
     * @param array $tags
     * @param string $thumbnail
     * @param string $titleStyle
     * @param bool $wip
     */
    public function __construct(stdClass $additionalMetadata, array $aliases, Colors $colors, DatabaseMetadataClass $databaseMetadata, string $finished, array $madeWith, string $pageBackground, bool $private, string $started, array $tags, string $thumbnail, string $titleStyle, bool $wip) {
        $this->additionalMetadata = $additionalMetadata;
        $this->aliases = $aliases;
        $this->colors = $colors;
        $this->databaseMetadata = $databaseMetadata;
        $this->finished = $finished;
        $this->madeWith = $madeWith;
        $this->pageBackground = $pageBackground;
        $this->private = $private;
        $this->started = $started;
        $this->tags = $tags;
        $this->thumbnail = $thumbnail;
        $this->titleStyle = $titleStyle;
        $this->wip = $wip;
    }

    /**
     * @param stdClass $value
     * @throws Exception
     * @return stdClass
     */
    public static function fromAdditionalMetadata(stdClass $value): stdClass {
        function from($my): stdClass {
            $out = new stdClass();
            foreach ($my as $k => $v) {
                $out->$k = $v; /*any*/
            }
            return $out;
        }
        return from($value);
    }

    /**
     * @throws Exception
     * @return stdClass
     */
    public function toAdditionalMetadata(): stdClass {
        if (Metadata::validateAdditionalMetadata($this->additionalMetadata))  {
            function to($my): stdClass {
                $out = new stdClass();
                foreach ($my as $k => $v) {
                    $my->$k = $v; /*any*/
                }
                return $out;
            }
            return to($this->additionalMetadata);
        }
        throw new Exception('never get to this Metadata::additionalMetadata');
    }

    /**
     * @param stdClass
     * @return bool
     * @throws Exception
     */
    public static function validateAdditionalMetadata(stdClass $value): bool {
        foreach ($value as $k => $v) {
            if (!defined($v)) {
                throw new Exception("Attribute Error:Metadata::additionalMetadata");
            }
        }
        return true;
    }

    /**
     * @throws Exception
     * @return stdClass
     */
    public function getAdditionalMetadata(): stdClass {
        if (Metadata::validateAdditionalMetadata($this->additionalMetadata))  {
            return $this->additionalMetadata;
        }
        throw new Exception('never get to getAdditionalMetadata Metadata::additionalMetadata');
    }

    /**
     * @return stdClass
     */
    public static function sampleAdditionalMetadata(): stdClass {
        function sample(): stdClass {
            $out = new stdClass();
            $out->{'Metadata'} = 'AnyType::Metadata::additionalMetadata::31';/*31:additionalMetadata*/
            return $out;
        }
        return sample();
    }

    /**
     * @param array $value
     * @throws Exception
     * @return array
     */
    public static function fromAliases(array $value): array {
        return  array_map(function ($value) {
            return $value; /*string*/
        }, $value);
    }

    /**
     * @throws Exception
     * @return array
     */
    public function toAliases(): array {
        if (Metadata::validateAliases($this->aliases))  {
            return array_map(function ($value) {
                return $value; /*string*/
            }, $this->aliases);
        }
        throw new Exception('never get to this Metadata::aliases');
    }

    /**
     * @param array
     * @return bool
     * @throws Exception
     */
    public static function validateAliases(array $value): bool {
        if (!is_array($value)) {
            throw new Exception("Attribute Error:Metadata::aliases");
        }
        array_walk($value, function($value_v) {
            if (!is_string($value_v)) {
                throw new Exception("Attribute Error:Metadata::aliases");
            }
        });
        return true;
    }

    /**
     * @throws Exception
     * @return array
     */
    public function getAliases(): array {
        if (Metadata::validateAliases($this->aliases))  {
            return $this->aliases;
        }
        throw new Exception('never get to getAliases Metadata::aliases');
    }

    /**
     * @return array
     */
    public static function sampleAliases(): array {
        return  array(
            'Metadata::::32' /*32:*/
        ); /* 32:aliases*/
    }

    /**
     * @param stdClass $value
     * @throws Exception
     * @return Colors
     */
    public static function fromColors(stdClass $value): Colors {
        return Colors::from($value); /*class*/
    }

    /**
     * @throws Exception
     * @return stdClass
     */
    public function toColors(): stdClass {
        if (Metadata::validateColors($this->colors))  {
            return $this->colors->to(); /*class*/
        }
        throw new Exception('never get to this Metadata::colors');
    }

    /**
     * @param Colors
     * @return bool
     * @throws Exception
     */
    public static function validateColors(Colors $value): bool {
        $value->validate();
        return true;
    }

    /**
     * @throws Exception
     * @return Colors
     */
    public function getColors(): Colors {
        if (Metadata::validateColors($this->colors))  {
            return $this->colors;
        }
        throw new Exception('never get to getColors Metadata::colors');
    }

    /**
     * @return Colors
     */
    public static function sampleColors(): Colors {
        return Colors::sample(); /*33:colors*/
    }

    /**
     * @param stdClass $value
     * @throws Exception
     * @return DatabaseMetadataClass
     */
    public static function fromDatabaseMetadata(stdClass $value): DatabaseMetadataClass {
        return DatabaseMetadataClass::from($value); /*class*/
    }

    /**
     * @throws Exception
     * @return stdClass
     */
    public function toDatabaseMetadata(): stdClass {
        if (Metadata::validateDatabaseMetadata($this->databaseMetadata))  {
            return $this->databaseMetadata->to(); /*class*/
        }
        throw new Exception('never get to this Metadata::databaseMetadata');
    }

    /**
     * @param DatabaseMetadataClass
     * @return bool
     * @throws Exception
     */
    public static function validateDatabaseMetadata(DatabaseMetadataClass $value): bool {
        $value->validate();
        return true;
    }

    /**
     * @throws Exception
     * @return DatabaseMetadataClass
     */
    public function getDatabaseMetadata(): DatabaseMetadataClass {
        if (Metadata::validateDatabaseMetadata($this->databaseMetadata))  {
            return $this->databaseMetadata;
        }
        throw new Exception('never get to getDatabaseMetadata Metadata::databaseMetadata');
    }

    /**
     * @return DatabaseMetadataClass
     */
    public static function sampleDatabaseMetadata(): DatabaseMetadataClass {
        return DatabaseMetadataClass::sample(); /*34:databaseMetadata*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromFinished(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toFinished(): string {
        if (Metadata::validateFinished($this->finished))  {
            return $this->finished; /*string*/
        }
        throw new Exception('never get to this Metadata::finished');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateFinished(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Metadata::finished");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getFinished(): string {
        if (Metadata::validateFinished($this->finished))  {
            return $this->finished;
        }
        throw new Exception('never get to getFinished Metadata::finished');
    }

    /**
     * @return string
     */
    public static function sampleFinished(): string {
        return 'Metadata::finished::35'; /*35:finished*/
    }

    /**
     * @param array $value
     * @throws Exception
     * @return array
     */
    public static function fromMadeWith(array $value): array {
        return  array_map(function ($value) {
            return $value; /*string*/
        }, $value);
    }

    /**
     * @throws Exception
     * @return array
     */
    public function toMadeWith(): array {
        if (Metadata::validateMadeWith($this->madeWith))  {
            return array_map(function ($value) {
                return $value; /*string*/
            }, $this->madeWith);
        }
        throw new Exception('never get to this Metadata::madeWith');
    }

    /**
     * @param array
     * @return bool
     * @throws Exception
     */
    public static function validateMadeWith(array $value): bool {
        if (!is_array($value)) {
            throw new Exception("Attribute Error:Metadata::madeWith");
        }
        array_walk($value, function($value_v) {
            if (!is_string($value_v)) {
                throw new Exception("Attribute Error:Metadata::madeWith");
            }
        });
        return true;
    }

    /**
     * @throws Exception
     * @return array
     */
    public function getMadeWith(): array {
        if (Metadata::validateMadeWith($this->madeWith))  {
            return $this->madeWith;
        }
        throw new Exception('never get to getMadeWith Metadata::madeWith');
    }

    /**
     * @return array
     */
    public static function sampleMadeWith(): array {
        return  array(
            'Metadata::::36' /*36:*/
        ); /* 36:madeWith*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromPageBackground(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toPageBackground(): string {
        if (Metadata::validatePageBackground($this->pageBackground))  {
            return $this->pageBackground; /*string*/
        }
        throw new Exception('never get to this Metadata::pageBackground');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validatePageBackground(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Metadata::pageBackground");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getPageBackground(): string {
        if (Metadata::validatePageBackground($this->pageBackground))  {
            return $this->pageBackground;
        }
        throw new Exception('never get to getPageBackground Metadata::pageBackground');
    }

    /**
     * @return string
     */
    public static function samplePageBackground(): string {
        return 'Metadata::pageBackground::37'; /*37:pageBackground*/
    }

    /**
     * @param bool $value
     * @throws Exception
     * @return bool
     */
    public static function fromPrivate(bool $value): bool {
        return $value; /*bool*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function toPrivate(): bool {
        if (Metadata::validatePrivate($this->private))  {
            return $this->private; /*bool*/
        }
        throw new Exception('never get to this Metadata::private');
    }

    /**
     * @param bool
     * @return bool
     * @throws Exception
     */
    public static function validatePrivate(bool $value): bool {
        if (!is_bool($value)) {
            throw new Exception("Attribute Error:Metadata::private");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function getPrivate(): bool {
        if (Metadata::validatePrivate($this->private))  {
            return $this->private;
        }
        throw new Exception('never get to getPrivate Metadata::private');
    }

    /**
     * @return bool
     */
    public static function samplePrivate(): bool {
        return true; /*38:private*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromStarted(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toStarted(): string {
        if (Metadata::validateStarted($this->started))  {
            return $this->started; /*string*/
        }
        throw new Exception('never get to this Metadata::started');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateStarted(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Metadata::started");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getStarted(): string {
        if (Metadata::validateStarted($this->started))  {
            return $this->started;
        }
        throw new Exception('never get to getStarted Metadata::started');
    }

    /**
     * @return string
     */
    public static function sampleStarted(): string {
        return 'Metadata::started::39'; /*39:started*/
    }

    /**
     * @param array $value
     * @throws Exception
     * @return array
     */
    public static function fromTags(array $value): array {
        return  array_map(function ($value) {
            return $value; /*string*/
        }, $value);
    }

    /**
     * @throws Exception
     * @return array
     */
    public function toTags(): array {
        if (Metadata::validateTags($this->tags))  {
            return array_map(function ($value) {
                return $value; /*string*/
            }, $this->tags);
        }
        throw new Exception('never get to this Metadata::tags');
    }

    /**
     * @param array
     * @return bool
     * @throws Exception
     */
    public static function validateTags(array $value): bool {
        if (!is_array($value)) {
            throw new Exception("Attribute Error:Metadata::tags");
        }
        array_walk($value, function($value_v) {
            if (!is_string($value_v)) {
                throw new Exception("Attribute Error:Metadata::tags");
            }
        });
        return true;
    }

    /**
     * @throws Exception
     * @return array
     */
    public function getTags(): array {
        if (Metadata::validateTags($this->tags))  {
            return $this->tags;
        }
        throw new Exception('never get to getTags Metadata::tags');
    }

    /**
     * @return array
     */
    public static function sampleTags(): array {
        return  array(
            'Metadata::::40' /*40:*/
        ); /* 40:tags*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromThumbnail(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toThumbnail(): string {
        if (Metadata::validateThumbnail($this->thumbnail))  {
            return $this->thumbnail; /*string*/
        }
        throw new Exception('never get to this Metadata::thumbnail');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateThumbnail(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Metadata::thumbnail");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getThumbnail(): string {
        if (Metadata::validateThumbnail($this->thumbnail))  {
            return $this->thumbnail;
        }
        throw new Exception('never get to getThumbnail Metadata::thumbnail');
    }

    /**
     * @return string
     */
    public static function sampleThumbnail(): string {
        return 'Metadata::thumbnail::41'; /*41:thumbnail*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromTitleStyle(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toTitleStyle(): string {
        if (Metadata::validateTitleStyle($this->titleStyle))  {
            return $this->titleStyle; /*string*/
        }
        throw new Exception('never get to this Metadata::titleStyle');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateTitleStyle(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Metadata::titleStyle");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getTitleStyle(): string {
        if (Metadata::validateTitleStyle($this->titleStyle))  {
            return $this->titleStyle;
        }
        throw new Exception('never get to getTitleStyle Metadata::titleStyle');
    }

    /**
     * @return string
     */
    public static function sampleTitleStyle(): string {
        return 'Metadata::titleStyle::42'; /*42:titleStyle*/
    }

    /**
     * @param bool $value
     * @throws Exception
     * @return bool
     */
    public static function fromWip(bool $value): bool {
        return $value; /*bool*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function toWip(): bool {
        if (Metadata::validateWip($this->wip))  {
            return $this->wip; /*bool*/
        }
        throw new Exception('never get to this Metadata::wip');
    }

    /**
     * @param bool
     * @return bool
     * @throws Exception
     */
    public static function validateWip(bool $value): bool {
        if (!is_bool($value)) {
            throw new Exception("Attribute Error:Metadata::wip");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function getWip(): bool {
        if (Metadata::validateWip($this->wip))  {
            return $this->wip;
        }
        throw new Exception('never get to getWip Metadata::wip');
    }

    /**
     * @return bool
     */
    public static function sampleWip(): bool {
        return true; /*43:wip*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return Metadata::validateAdditionalMetadata($this->additionalMetadata)
        || Metadata::validateAliases($this->aliases)
        || Metadata::validateColors($this->colors)
        || Metadata::validateDatabaseMetadata($this->databaseMetadata)
        || Metadata::validateFinished($this->finished)
        || Metadata::validateMadeWith($this->madeWith)
        || Metadata::validatePageBackground($this->pageBackground)
        || Metadata::validatePrivate($this->private)
        || Metadata::validateStarted($this->started)
        || Metadata::validateTags($this->tags)
        || Metadata::validateThumbnail($this->thumbnail)
        || Metadata::validateTitleStyle($this->titleStyle)
        || Metadata::validateWip($this->wip);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'additionalMetadata'} = $this->toAdditionalMetadata();
        $out->{'aliases'} = $this->toAliases();
        $out->{'colors'} = $this->toColors();
        $out->{'databaseMetadata'} = $this->toDatabaseMetadata();
        $out->{'finished'} = $this->toFinished();
        $out->{'madeWith'} = $this->toMadeWith();
        $out->{'pageBackground'} = $this->toPageBackground();
        $out->{'private'} = $this->toPrivate();
        $out->{'started'} = $this->toStarted();
        $out->{'tags'} = $this->toTags();
        $out->{'thumbnail'} = $this->toThumbnail();
        $out->{'titleStyle'} = $this->toTitleStyle();
        $out->{'wip'} = $this->toWip();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return Metadata
     * @throws Exception
     */
    public static function from(stdClass $obj): Metadata {
        return new Metadata(
         Metadata::fromAdditionalMetadata($obj->{'additionalMetadata'})
        ,Metadata::fromAliases($obj->{'aliases'})
        ,Metadata::fromColors($obj->{'colors'})
        ,Metadata::fromDatabaseMetadata($obj->{'databaseMetadata'})
        ,Metadata::fromFinished($obj->{'finished'})
        ,Metadata::fromMadeWith($obj->{'madeWith'})
        ,Metadata::fromPageBackground($obj->{'pageBackground'})
        ,Metadata::fromPrivate($obj->{'private'})
        ,Metadata::fromStarted($obj->{'started'})
        ,Metadata::fromTags($obj->{'tags'})
        ,Metadata::fromThumbnail($obj->{'thumbnail'})
        ,Metadata::fromTitleStyle($obj->{'titleStyle'})
        ,Metadata::fromWip($obj->{'wip'})
        );
    }

    /**
     * @return Metadata
     */
    public static function sample(): Metadata {
        return new Metadata(
         Metadata::sampleAdditionalMetadata()
        ,Metadata::sampleAliases()
        ,Metadata::sampleColors()
        ,Metadata::sampleDatabaseMetadata()
        ,Metadata::sampleFinished()
        ,Metadata::sampleMadeWith()
        ,Metadata::samplePageBackground()
        ,Metadata::samplePrivate()
        ,Metadata::sampleStarted()
        ,Metadata::sampleTags()
        ,Metadata::sampleThumbnail()
        ,Metadata::sampleTitleStyle()
        ,Metadata::sampleWip()
        );
    }
}

// This is a autogenerated file:DatabaseMetadataClass

class DatabaseMetadataClass {
    private bool $partial; // json:Partial Required

    /**
     * @param bool $partial
     */
    public function __construct(bool $partial) {
        $this->partial = $partial;
    }

    /**
     * Partial is true if the database was not fully built.
     *
     * @param bool $value
     * @throws Exception
     * @return bool
     */
    public static function fromPartial(bool $value): bool {
        return $value; /*bool*/
    }

    /**
     * Partial is true if the database was not fully built.
     *
     * @throws Exception
     * @return bool
     */
    public function toPartial(): bool {
        if (DatabaseMetadataClass::validatePartial($this->partial))  {
            return $this->partial; /*bool*/
        }
        throw new Exception('never get to this DatabaseMetadataClass::partial');
    }

    /**
     * Partial is true if the database was not fully built.
     *
     * @param bool
     * @return bool
     * @throws Exception
     */
    public static function validatePartial(bool $value): bool {
        if (!is_bool($value)) {
            throw new Exception("Attribute Error:DatabaseMetadataClass::partial");
        }
        return true;
    }

    /**
     * Partial is true if the database was not fully built.
     *
     * @throws Exception
     * @return bool
     */
    public function getPartial(): bool {
        if (DatabaseMetadataClass::validatePartial($this->partial))  {
            return $this->partial;
        }
        throw new Exception('never get to getPartial DatabaseMetadataClass::partial');
    }

    /**
     * Partial is true if the database was not fully built.
     *
     * @return bool
     */
    public static function samplePartial(): bool {
        return true; /*31:partial*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return DatabaseMetadataClass::validatePartial($this->partial);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'Partial'} = $this->toPartial();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return DatabaseMetadataClass
     * @throws Exception
     */
    public static function from(stdClass $obj): DatabaseMetadataClass {
        return new DatabaseMetadataClass(
         DatabaseMetadataClass::fromPartial($obj->{'Partial'})
        );
    }

    /**
     * @return DatabaseMetadataClass
     */
    public static function sample(): DatabaseMetadataClass {
        return new DatabaseMetadataClass(
         DatabaseMetadataClass::samplePartial()
        );
    }
}
