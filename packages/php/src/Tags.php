<?php

namespace Ortfo\Db;

// This is a autogenerated file:Tags

class Tags {
    private array $aliases; // json:aliases Required
    private string $description; // json:description Required
    private Detect $detect; // json:detect Required
    private string $learnMoreAt; // json:learn more at Required
    private string $plural; // json:plural Required
    private string $singular; // json:singular Required

    /**
     * @param array $aliases
     * @param string $description
     * @param Detect $detect
     * @param string $learnMoreAt
     * @param string $plural
     * @param string $singular
     */
    public function __construct(array $aliases, string $description, Detect $detect, string $learnMoreAt, string $plural, string $singular) {
        $this->aliases = $aliases;
        $this->description = $description;
        $this->detect = $detect;
        $this->learnMoreAt = $learnMoreAt;
        $this->plural = $plural;
        $this->singular = $singular;
    }

    /**
     * @param array $value
     * @throws Exception
     * @return array
     */
    public static function fromAliases(array $value): array {
        return  array_map(function ($value) {
            return $value; /*string*/
        }, $value);
    }

    /**
     * @throws Exception
     * @return array
     */
    public function toAliases(): array {
        if (Tags::validateAliases($this->aliases))  {
            return array_map(function ($value) {
                return $value; /*string*/
            }, $this->aliases);
        }
        throw new Exception('never get to this Tags::aliases');
    }

    /**
     * @param array
     * @return bool
     * @throws Exception
     */
    public static function validateAliases(array $value): bool {
        if (!is_array($value)) {
            throw new Exception("Attribute Error:Tags::aliases");
        }
        array_walk($value, function($value_v) {
            if (!is_string($value_v)) {
                throw new Exception("Attribute Error:Tags::aliases");
            }
        });
        return true;
    }

    /**
     * @throws Exception
     * @return array
     */
    public function getAliases(): array {
        if (Tags::validateAliases($this->aliases))  {
            return $this->aliases;
        }
        throw new Exception('never get to getAliases Tags::aliases');
    }

    /**
     * @return array
     */
    public static function sampleAliases(): array {
        return  array(
            'Tags::::31' /*31:*/
        ); /* 31:aliases*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromDescription(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toDescription(): string {
        if (Tags::validateDescription($this->description))  {
            return $this->description; /*string*/
        }
        throw new Exception('never get to this Tags::description');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateDescription(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Tags::description");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getDescription(): string {
        if (Tags::validateDescription($this->description))  {
            return $this->description;
        }
        throw new Exception('never get to getDescription Tags::description');
    }

    /**
     * @return string
     */
    public static function sampleDescription(): string {
        return 'Tags::description::32'; /*32:description*/
    }

    /**
     * @param stdClass $value
     * @throws Exception
     * @return Detect
     */
    public static function fromDetect(stdClass $value): Detect {
        return Detect::from($value); /*class*/
    }

    /**
     * @throws Exception
     * @return stdClass
     */
    public function toDetect(): stdClass {
        if (Tags::validateDetect($this->detect))  {
            return $this->detect->to(); /*class*/
        }
        throw new Exception('never get to this Tags::detect');
    }

    /**
     * @param Detect
     * @return bool
     * @throws Exception
     */
    public static function validateDetect(Detect $value): bool {
        $value->validate();
        return true;
    }

    /**
     * @throws Exception
     * @return Detect
     */
    public function getDetect(): Detect {
        if (Tags::validateDetect($this->detect))  {
            return $this->detect;
        }
        throw new Exception('never get to getDetect Tags::detect');
    }

    /**
     * @return Detect
     */
    public static function sampleDetect(): Detect {
        return Detect::sample(); /*33:detect*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromLearnMoreAt(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toLearnMoreAt(): string {
        if (Tags::validateLearnMoreAt($this->learnMoreAt))  {
            return $this->learnMoreAt; /*string*/
        }
        throw new Exception('never get to this Tags::learnMoreAt');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateLearnMoreAt(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Tags::learnMoreAt");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getLearnMoreAt(): string {
        if (Tags::validateLearnMoreAt($this->learnMoreAt))  {
            return $this->learnMoreAt;
        }
        throw new Exception('never get to getLearnMoreAt Tags::learnMoreAt');
    }

    /**
     * @return string
     */
    public static function sampleLearnMoreAt(): string {
        return 'Tags::learnMoreAt::34'; /*34:learnMoreAt*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromPlural(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toPlural(): string {
        if (Tags::validatePlural($this->plural))  {
            return $this->plural; /*string*/
        }
        throw new Exception('never get to this Tags::plural');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validatePlural(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Tags::plural");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getPlural(): string {
        if (Tags::validatePlural($this->plural))  {
            return $this->plural;
        }
        throw new Exception('never get to getPlural Tags::plural');
    }

    /**
     * @return string
     */
    public static function samplePlural(): string {
        return 'Tags::plural::35'; /*35:plural*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromSingular(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toSingular(): string {
        if (Tags::validateSingular($this->singular))  {
            return $this->singular; /*string*/
        }
        throw new Exception('never get to this Tags::singular');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateSingular(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Tags::singular");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getSingular(): string {
        if (Tags::validateSingular($this->singular))  {
            return $this->singular;
        }
        throw new Exception('never get to getSingular Tags::singular');
    }

    /**
     * @return string
     */
    public static function sampleSingular(): string {
        return 'Tags::singular::36'; /*36:singular*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return Tags::validateAliases($this->aliases)
        || Tags::validateDescription($this->description)
        || Tags::validateDetect($this->detect)
        || Tags::validateLearnMoreAt($this->learnMoreAt)
        || Tags::validatePlural($this->plural)
        || Tags::validateSingular($this->singular);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'aliases'} = $this->toAliases();
        $out->{'description'} = $this->toDescription();
        $out->{'detect'} = $this->toDetect();
        $out->{'learn more at'} = $this->toLearnMoreAt();
        $out->{'plural'} = $this->toPlural();
        $out->{'singular'} = $this->toSingular();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return Tags
     * @throws Exception
     */
    public static function from(stdClass $obj): Tags {
        return new Tags(
         Tags::fromAliases($obj->{'aliases'})
        ,Tags::fromDescription($obj->{'description'})
        ,Tags::fromDetect($obj->{'detect'})
        ,Tags::fromLearnMoreAt($obj->{'learn more at'})
        ,Tags::fromPlural($obj->{'plural'})
        ,Tags::fromSingular($obj->{'singular'})
        );
    }

    /**
     * @return Tags
     */
    public static function sample(): Tags {
        return new Tags(
         Tags::sampleAliases()
        ,Tags::sampleDescription()
        ,Tags::sampleDetect()
        ,Tags::sampleLearnMoreAt()
        ,Tags::samplePlural()
        ,Tags::sampleSingular()
        );
    }
}

// This is a autogenerated file:Detect

class Detect {
    private array $files; // json:files Required
    private array $madeWith; // json:made with Required
    private array $search; // json:search Required

    /**
     * @param array $files
     * @param array $madeWith
     * @param array $search
     */
    public function __construct(array $files, array $madeWith, array $search) {
        $this->files = $files;
        $this->madeWith = $madeWith;
        $this->search = $search;
    }

    /**
     * @param array $value
     * @throws Exception
     * @return array
     */
    public static function fromFiles(array $value): array {
        return  array_map(function ($value) {
            return $value; /*string*/
        }, $value);
    }

    /**
     * @throws Exception
     * @return array
     */
    public function toFiles(): array {
        if (Detect::validateFiles($this->files))  {
            return array_map(function ($value) {
                return $value; /*string*/
            }, $this->files);
        }
        throw new Exception('never get to this Detect::files');
    }

    /**
     * @param array
     * @return bool
     * @throws Exception
     */
    public static function validateFiles(array $value): bool {
        if (!is_array($value)) {
            throw new Exception("Attribute Error:Detect::files");
        }
        array_walk($value, function($value_v) {
            if (!is_string($value_v)) {
                throw new Exception("Attribute Error:Detect::files");
            }
        });
        return true;
    }

    /**
     * @throws Exception
     * @return array
     */
    public function getFiles(): array {
        if (Detect::validateFiles($this->files))  {
            return $this->files;
        }
        throw new Exception('never get to getFiles Detect::files');
    }

    /**
     * @return array
     */
    public static function sampleFiles(): array {
        return  array(
            'Detect::::31' /*31:*/
        ); /* 31:files*/
    }

    /**
     * @param array $value
     * @throws Exception
     * @return array
     */
    public static function fromMadeWith(array $value): array {
        return  array_map(function ($value) {
            return $value; /*string*/
        }, $value);
    }

    /**
     * @throws Exception
     * @return array
     */
    public function toMadeWith(): array {
        if (Detect::validateMadeWith($this->madeWith))  {
            return array_map(function ($value) {
                return $value; /*string*/
            }, $this->madeWith);
        }
        throw new Exception('never get to this Detect::madeWith');
    }

    /**
     * @param array
     * @return bool
     * @throws Exception
     */
    public static function validateMadeWith(array $value): bool {
        if (!is_array($value)) {
            throw new Exception("Attribute Error:Detect::madeWith");
        }
        array_walk($value, function($value_v) {
            if (!is_string($value_v)) {
                throw new Exception("Attribute Error:Detect::madeWith");
            }
        });
        return true;
    }

    /**
     * @throws Exception
     * @return array
     */
    public function getMadeWith(): array {
        if (Detect::validateMadeWith($this->madeWith))  {
            return $this->madeWith;
        }
        throw new Exception('never get to getMadeWith Detect::madeWith');
    }

    /**
     * @return array
     */
    public static function sampleMadeWith(): array {
        return  array(
            'Detect::::32' /*32:*/
        ); /* 32:madeWith*/
    }

    /**
     * @param array $value
     * @throws Exception
     * @return array
     */
    public static function fromSearch(array $value): array {
        return  array_map(function ($value) {
            return $value; /*string*/
        }, $value);
    }

    /**
     * @throws Exception
     * @return array
     */
    public function toSearch(): array {
        if (Detect::validateSearch($this->search))  {
            return array_map(function ($value) {
                return $value; /*string*/
            }, $this->search);
        }
        throw new Exception('never get to this Detect::search');
    }

    /**
     * @param array
     * @return bool
     * @throws Exception
     */
    public static function validateSearch(array $value): bool {
        if (!is_array($value)) {
            throw new Exception("Attribute Error:Detect::search");
        }
        array_walk($value, function($value_v) {
            if (!is_string($value_v)) {
                throw new Exception("Attribute Error:Detect::search");
            }
        });
        return true;
    }

    /**
     * @throws Exception
     * @return array
     */
    public function getSearch(): array {
        if (Detect::validateSearch($this->search))  {
            return $this->search;
        }
        throw new Exception('never get to getSearch Detect::search');
    }

    /**
     * @return array
     */
    public static function sampleSearch(): array {
        return  array(
            'Detect::::33' /*33:*/
        ); /* 33:search*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return Detect::validateFiles($this->files)
        || Detect::validateMadeWith($this->madeWith)
        || Detect::validateSearch($this->search);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'files'} = $this->toFiles();
        $out->{'made with'} = $this->toMadeWith();
        $out->{'search'} = $this->toSearch();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return Detect
     * @throws Exception
     */
    public static function from(stdClass $obj): Detect {
        return new Detect(
         Detect::fromFiles($obj->{'files'})
        ,Detect::fromMadeWith($obj->{'made with'})
        ,Detect::fromSearch($obj->{'search'})
        );
    }

    /**
     * @return Detect
     */
    public static function sample(): Detect {
        return new Detect(
         Detect::sampleFiles()
        ,Detect::sampleMadeWith()
        ,Detect::sampleSearch()
        );
    }
}
