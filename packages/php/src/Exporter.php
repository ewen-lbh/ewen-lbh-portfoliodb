<?php

namespace Ortfo\Db;

// This is a autogenerated file:Exporter

class Exporter {
    private ?array $after; // json:after Optional
    private ?array $before; // json:before Optional
    private ?stdClass $data; // json:data Optional
    private string $description; // json:description Required
    private string $name; // json:name Required
    private ?array $requires; // json:requires Optional
    private ?bool $verbose; // json:verbose Optional
    private ?array $work; // json:work Optional

    /**
     * @param array|null $after
     * @param array|null $before
     * @param stdClass|null $data
     * @param string $description
     * @param string $name
     * @param array|null $requires
     * @param bool|null $verbose
     * @param array|null $work
     */
    public function __construct(?array $after, ?array $before, ?stdClass $data, string $description, string $name, ?array $requires, ?bool $verbose, ?array $work) {
        $this->after = $after;
        $this->before = $before;
        $this->data = $data;
        $this->description = $description;
        $this->name = $name;
        $this->requires = $requires;
        $this->verbose = $verbose;
        $this->work = $work;
    }

    /**
     * Commands to run after the build finishes. Go text template that receives .Data and.Database, the built database.
     *
     * @param ?array $value
     * @throws Exception
     * @return ?array
     */
    public static function fromAfter(?array $value): ?array {
        if (!is_null($value)) {
            return  array_map(function ($value) {
                return ExporterSchema::from($value); /*class*/
            }, $value);
        } else {
            return null;
        }
    }

    /**
     * Commands to run after the build finishes. Go text template that receives .Data and.Database, the built database.
     *
     * @throws Exception
     * @return ?array
     */
    public function toAfter(): ?array {
        if (Exporter::validateAfter($this->after))  {
            if (!is_null($this->after)) {
                return array_map(function ($value) {
                    return $value->to(); /*class*/
                }, $this->after);
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Exporter::after');
    }

    /**
     * Commands to run after the build finishes. Go text template that receives .Data and.Database, the built database.
     *
     * @param array|null
     * @return bool
     * @throws Exception
     */
    public static function validateAfter(?array $value): bool {
        if (!is_null($value)) {
            if (!is_array($value)) {
                throw new Exception("Attribute Error:Exporter::after");
            }
            array_walk($value, function($value_v) {
                $value_v->validate();
            });
        }
        return true;
    }

    /**
     * Commands to run after the build finishes. Go text template that receives .Data and.Database, the built database.
     *
     * @throws Exception
     * @return ?array
     */
    public function getAfter(): ?array {
        if (Exporter::validateAfter($this->after))  {
            return $this->after;
        }
        throw new Exception('never get to getAfter Exporter::after');
    }

    /**
     * Commands to run after the build finishes. Go text template that receives .Data and.Database, the built database.
     *
     * @return ?array
     */
    public static function sampleAfter(): ?array {
        return  array(
            ExporterSchema::sample() /*31:*/
        ); /* 31:after*/
    }

    /**
     * Commands to run before the build starts. Go text template that receives .Data
     *
     * @param ?array $value
     * @throws Exception
     * @return ?array
     */
    public static function fromBefore(?array $value): ?array {
        if (!is_null($value)) {
            return  array_map(function ($value) {
                return ExporterSchema::from($value); /*class*/
            }, $value);
        } else {
            return null;
        }
    }

    /**
     * Commands to run before the build starts. Go text template that receives .Data
     *
     * @throws Exception
     * @return ?array
     */
    public function toBefore(): ?array {
        if (Exporter::validateBefore($this->before))  {
            if (!is_null($this->before)) {
                return array_map(function ($value) {
                    return $value->to(); /*class*/
                }, $this->before);
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Exporter::before');
    }

    /**
     * Commands to run before the build starts. Go text template that receives .Data
     *
     * @param array|null
     * @return bool
     * @throws Exception
     */
    public static function validateBefore(?array $value): bool {
        if (!is_null($value)) {
            if (!is_array($value)) {
                throw new Exception("Attribute Error:Exporter::before");
            }
            array_walk($value, function($value_v) {
                $value_v->validate();
            });
        }
        return true;
    }

    /**
     * Commands to run before the build starts. Go text template that receives .Data
     *
     * @throws Exception
     * @return ?array
     */
    public function getBefore(): ?array {
        if (Exporter::validateBefore($this->before))  {
            return $this->before;
        }
        throw new Exception('never get to getBefore Exporter::before');
    }

    /**
     * Commands to run before the build starts. Go text template that receives .Data
     *
     * @return ?array
     */
    public static function sampleBefore(): ?array {
        return  array(
            ExporterSchema::sample() /*32:*/
        ); /* 32:before*/
    }

    /**
     * Initial data
     *
     * @param ?stdClass $value
     * @throws Exception
     * @return ?stdClass
     */
    public static function fromData(?stdClass $value): ?stdClass {
        if (!is_null($value)) {
            function from($my): stdClass {
                $out = new stdClass();
                foreach ($my as $k => $v) {
                    $out->$k = $v; /*any*/
                }
                return $out;
            }
            return from($value);
        } else {
            return null;
        }
    }

    /**
     * Initial data
     *
     * @throws Exception
     * @return ?stdClass
     */
    public function toData(): ?stdClass {
        if (Exporter::validateData($this->data))  {
            if (!is_null($this->data)) {
                function to($my): stdClass {
                    $out = new stdClass();
                    foreach ($my as $k => $v) {
                        $my->$k = $v; /*any*/
                    }
                    return $out;
                }
                return to($this->data);
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Exporter::data');
    }

    /**
     * Initial data
     *
     * @param stdClass|null
     * @return bool
     * @throws Exception
     */
    public static function validateData(?stdClass $value): bool {
        if (!is_null($value)) {
            foreach ($value as $k => $v) {
                if (!defined($v)) {
                    throw new Exception("Attribute Error:Exporter::data");
                }
            }
        }
        return true;
    }

    /**
     * Initial data
     *
     * @throws Exception
     * @return ?stdClass
     */
    public function getData(): ?stdClass {
        if (Exporter::validateData($this->data))  {
            return $this->data;
        }
        throw new Exception('never get to getData Exporter::data');
    }

    /**
     * Initial data
     *
     * @return ?stdClass
     */
    public static function sampleData(): ?stdClass {
        function sample(): stdClass {
            $out = new stdClass();
            $out->{'Exporter'} = 'AnyType::Exporter::data::33';/*33:data*/
            return $out;
        }
        return sample();
    }

    /**
     * Some documentation about the exporter
     *
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromDescription(string $value): string {
        return $value; /*string*/
    }

    /**
     * Some documentation about the exporter
     *
     * @throws Exception
     * @return string
     */
    public function toDescription(): string {
        if (Exporter::validateDescription($this->description))  {
            return $this->description; /*string*/
        }
        throw new Exception('never get to this Exporter::description');
    }

    /**
     * Some documentation about the exporter
     *
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateDescription(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Exporter::description");
        }
        return true;
    }

    /**
     * Some documentation about the exporter
     *
     * @throws Exception
     * @return string
     */
    public function getDescription(): string {
        if (Exporter::validateDescription($this->description))  {
            return $this->description;
        }
        throw new Exception('never get to getDescription Exporter::description');
    }

    /**
     * Some documentation about the exporter
     *
     * @return string
     */
    public static function sampleDescription(): string {
        return 'Exporter::description::34'; /*34:description*/
    }

    /**
     * The name of the exporter
     *
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromName(string $value): string {
        return $value; /*string*/
    }

    /**
     * The name of the exporter
     *
     * @throws Exception
     * @return string
     */
    public function toName(): string {
        if (Exporter::validateName($this->name))  {
            return $this->name; /*string*/
        }
        throw new Exception('never get to this Exporter::name');
    }

    /**
     * The name of the exporter
     *
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateName(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Exporter::name");
        }
        return true;
    }

    /**
     * The name of the exporter
     *
     * @throws Exception
     * @return string
     */
    public function getName(): string {
        if (Exporter::validateName($this->name))  {
            return $this->name;
        }
        throw new Exception('never get to getName Exporter::name');
    }

    /**
     * The name of the exporter
     *
     * @return string
     */
    public static function sampleName(): string {
        return 'Exporter::name::35'; /*35:name*/
    }

    /**
     * List of programs that are required to be available in the PATH for the exporter to run.
     *
     * @param ?array $value
     * @throws Exception
     * @return ?array
     */
    public static function fromRequires(?array $value): ?array {
        if (!is_null($value)) {
            return  array_map(function ($value) {
                return $value; /*string*/
            }, $value);
        } else {
            return null;
        }
    }

    /**
     * List of programs that are required to be available in the PATH for the exporter to run.
     *
     * @throws Exception
     * @return ?array
     */
    public function toRequires(): ?array {
        if (Exporter::validateRequires($this->requires))  {
            if (!is_null($this->requires)) {
                return array_map(function ($value) {
                    return $value; /*string*/
                }, $this->requires);
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Exporter::requires');
    }

    /**
     * List of programs that are required to be available in the PATH for the exporter to run.
     *
     * @param array|null
     * @return bool
     * @throws Exception
     */
    public static function validateRequires(?array $value): bool {
        if (!is_null($value)) {
            if (!is_array($value)) {
                throw new Exception("Attribute Error:Exporter::requires");
            }
            array_walk($value, function($value_v) {
                if (!is_string($value_v)) {
                    throw new Exception("Attribute Error:Exporter::requires");
                }
            });
        }
        return true;
    }

    /**
     * List of programs that are required to be available in the PATH for the exporter to run.
     *
     * @throws Exception
     * @return ?array
     */
    public function getRequires(): ?array {
        if (Exporter::validateRequires($this->requires))  {
            return $this->requires;
        }
        throw new Exception('never get to getRequires Exporter::requires');
    }

    /**
     * List of programs that are required to be available in the PATH for the exporter to run.
     *
     * @return ?array
     */
    public static function sampleRequires(): ?array {
        return  array(
            'Exporter::::36' /*36:*/
        ); /* 36:requires*/
    }

    /**
     * If true, will show every command that is run
     *
     * @param ?bool $value
     * @throws Exception
     * @return ?bool
     */
    public static function fromVerbose(?bool $value): ?bool {
        if (!is_null($value)) {
            return $value; /*bool*/
        } else {
            return null;
        }
    }

    /**
     * If true, will show every command that is run
     *
     * @throws Exception
     * @return ?bool
     */
    public function toVerbose(): ?bool {
        if (Exporter::validateVerbose($this->verbose))  {
            if (!is_null($this->verbose)) {
                return $this->verbose; /*bool*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Exporter::verbose');
    }

    /**
     * If true, will show every command that is run
     *
     * @param bool|null
     * @return bool
     * @throws Exception
     */
    public static function validateVerbose(?bool $value): bool {
        if (!is_null($value)) {
            if (!is_bool($value)) {
                throw new Exception("Attribute Error:Exporter::verbose");
            }
        }
        return true;
    }

    /**
     * If true, will show every command that is run
     *
     * @throws Exception
     * @return ?bool
     */
    public function getVerbose(): ?bool {
        if (Exporter::validateVerbose($this->verbose))  {
            return $this->verbose;
        }
        throw new Exception('never get to getVerbose Exporter::verbose');
    }

    /**
     * If true, will show every command that is run
     *
     * @return ?bool
     */
    public static function sampleVerbose(): ?bool {
        return true; /*37:verbose*/
    }

    /**
     * Commands to run during the build, for each work. Go text template that receives .Data and.Work, the current work.
     *
     * @param ?array $value
     * @throws Exception
     * @return ?array
     */
    public static function fromWork(?array $value): ?array {
        if (!is_null($value)) {
            return  array_map(function ($value) {
                return ExporterSchema::from($value); /*class*/
            }, $value);
        } else {
            return null;
        }
    }

    /**
     * Commands to run during the build, for each work. Go text template that receives .Data and.Work, the current work.
     *
     * @throws Exception
     * @return ?array
     */
    public function toWork(): ?array {
        if (Exporter::validateWork($this->work))  {
            if (!is_null($this->work)) {
                return array_map(function ($value) {
                    return $value->to(); /*class*/
                }, $this->work);
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Exporter::work');
    }

    /**
     * Commands to run during the build, for each work. Go text template that receives .Data and.Work, the current work.
     *
     * @param array|null
     * @return bool
     * @throws Exception
     */
    public static function validateWork(?array $value): bool {
        if (!is_null($value)) {
            if (!is_array($value)) {
                throw new Exception("Attribute Error:Exporter::work");
            }
            array_walk($value, function($value_v) {
                $value_v->validate();
            });
        }
        return true;
    }

    /**
     * Commands to run during the build, for each work. Go text template that receives .Data and.Work, the current work.
     *
     * @throws Exception
     * @return ?array
     */
    public function getWork(): ?array {
        if (Exporter::validateWork($this->work))  {
            return $this->work;
        }
        throw new Exception('never get to getWork Exporter::work');
    }

    /**
     * Commands to run during the build, for each work. Go text template that receives .Data and.Work, the current work.
     *
     * @return ?array
     */
    public static function sampleWork(): ?array {
        return  array(
            ExporterSchema::sample() /*38:*/
        ); /* 38:work*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return Exporter::validateAfter($this->after)
        || Exporter::validateBefore($this->before)
        || Exporter::validateData($this->data)
        || Exporter::validateDescription($this->description)
        || Exporter::validateName($this->name)
        || Exporter::validateRequires($this->requires)
        || Exporter::validateVerbose($this->verbose)
        || Exporter::validateWork($this->work);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'after'} = $this->toAfter();
        $out->{'before'} = $this->toBefore();
        $out->{'data'} = $this->toData();
        $out->{'description'} = $this->toDescription();
        $out->{'name'} = $this->toName();
        $out->{'requires'} = $this->toRequires();
        $out->{'verbose'} = $this->toVerbose();
        $out->{'work'} = $this->toWork();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return Exporter
     * @throws Exception
     */
    public static function from(stdClass $obj): Exporter {
        return new Exporter(
         Exporter::fromAfter($obj->{'after'})
        ,Exporter::fromBefore($obj->{'before'})
        ,Exporter::fromData($obj->{'data'})
        ,Exporter::fromDescription($obj->{'description'})
        ,Exporter::fromName($obj->{'name'})
        ,Exporter::fromRequires($obj->{'requires'})
        ,Exporter::fromVerbose($obj->{'verbose'})
        ,Exporter::fromWork($obj->{'work'})
        );
    }

    /**
     * @return Exporter
     */
    public static function sample(): Exporter {
        return new Exporter(
         Exporter::sampleAfter()
        ,Exporter::sampleBefore()
        ,Exporter::sampleData()
        ,Exporter::sampleDescription()
        ,Exporter::sampleName()
        ,Exporter::sampleRequires()
        ,Exporter::sampleVerbose()
        ,Exporter::sampleWork()
        );
    }
}

// This is a autogenerated file:ExporterSchema

class ExporterSchema {
    private ?array $log; // json:log Optional
    private ?string $run; // json:run Optional

    /**
     * @param array|null $log
     * @param string|null $run
     */
    public function __construct(?array $log, ?string $run) {
        $this->log = $log;
        $this->run = $run;
    }

    /**
     * Log a message. The first argument is the verb, the second is the color, the third is themessage.
     *
     * @param ?array $value
     * @throws Exception
     * @return ?array
     */
    public static function fromLog(?array $value): ?array {
        if (!is_null($value)) {
            return  array_map(function ($value) {
                return $value; /*string*/
            }, $value);
        } else {
            return null;
        }
    }

    /**
     * Log a message. The first argument is the verb, the second is the color, the third is themessage.
     *
     * @throws Exception
     * @return ?array
     */
    public function toLog(): ?array {
        if (ExporterSchema::validateLog($this->log))  {
            if (!is_null($this->log)) {
                return array_map(function ($value) {
                    return $value; /*string*/
                }, $this->log);
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this ExporterSchema::log');
    }

    /**
     * Log a message. The first argument is the verb, the second is the color, the third is themessage.
     *
     * @param array|null
     * @return bool
     * @throws Exception
     */
    public static function validateLog(?array $value): bool {
        if (!is_null($value)) {
            if (!is_array($value)) {
                throw new Exception("Attribute Error:ExporterSchema::log");
            }
            array_walk($value, function($value_v) {
                if (!is_string($value_v)) {
                    throw new Exception("Attribute Error:ExporterSchema::log");
                }
            });
        }
        return true;
    }

    /**
     * Log a message. The first argument is the verb, the second is the color, the third is themessage.
     *
     * @throws Exception
     * @return ?array
     */
    public function getLog(): ?array {
        if (ExporterSchema::validateLog($this->log))  {
            return $this->log;
        }
        throw new Exception('never get to getLog ExporterSchema::log');
    }

    /**
     * Log a message. The first argument is the verb, the second is the color, the third is themessage.
     *
     * @return ?array
     */
    public static function sampleLog(): ?array {
        return  array(
            'ExporterSchema::::31' /*31:*/
        ); /* 31:log*/
    }

    /**
     * Run a command in a shell
     *
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromRun(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * Run a command in a shell
     *
     * @throws Exception
     * @return ?string
     */
    public function toRun(): ?string {
        if (ExporterSchema::validateRun($this->run))  {
            if (!is_null($this->run)) {
                return $this->run; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this ExporterSchema::run');
    }

    /**
     * Run a command in a shell
     *
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateRun(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:ExporterSchema::run");
            }
        }
        return true;
    }

    /**
     * Run a command in a shell
     *
     * @throws Exception
     * @return ?string
     */
    public function getRun(): ?string {
        if (ExporterSchema::validateRun($this->run))  {
            return $this->run;
        }
        throw new Exception('never get to getRun ExporterSchema::run');
    }

    /**
     * Run a command in a shell
     *
     * @return ?string
     */
    public static function sampleRun(): ?string {
        return 'ExporterSchema::run::32'; /*32:run*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return ExporterSchema::validateLog($this->log)
        || ExporterSchema::validateRun($this->run);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'log'} = $this->toLog();
        $out->{'run'} = $this->toRun();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return ExporterSchema
     * @throws Exception
     */
    public static function from(stdClass $obj): ExporterSchema {
        return new ExporterSchema(
         ExporterSchema::fromLog($obj->{'log'})
        ,ExporterSchema::fromRun($obj->{'run'})
        );
    }

    /**
     * @return ExporterSchema
     */
    public static function sample(): ExporterSchema {
        return new ExporterSchema(
         ExporterSchema::sampleLog()
        ,ExporterSchema::sampleRun()
        );
    }
}
