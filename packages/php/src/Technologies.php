<?php

namespace Ortfo\Db;

// This is a autogenerated file:Technologies

class Technologies {
    private array $aliases; // json:aliases Required
    private array $autodetect; // json:autodetect Required
    private string $by; // json:by Required
    private string $description; // json:description Required
    private array $files; // json:files Required
    private string $learnMoreAt; // json:learn more at Required
    private string $name; // json:name Required
    private string $slug; // json:slug Required

    /**
     * @param array $aliases
     * @param array $autodetect
     * @param string $by
     * @param string $description
     * @param array $files
     * @param string $learnMoreAt
     * @param string $name
     * @param string $slug
     */
    public function __construct(array $aliases, array $autodetect, string $by, string $description, array $files, string $learnMoreAt, string $name, string $slug) {
        $this->aliases = $aliases;
        $this->autodetect = $autodetect;
        $this->by = $by;
        $this->description = $description;
        $this->files = $files;
        $this->learnMoreAt = $learnMoreAt;
        $this->name = $name;
        $this->slug = $slug;
    }

    /**
     * @param array $value
     * @throws Exception
     * @return array
     */
    public static function fromAliases(array $value): array {
        return  array_map(function ($value) {
            return $value; /*string*/
        }, $value);
    }

    /**
     * @throws Exception
     * @return array
     */
    public function toAliases(): array {
        if (Technologies::validateAliases($this->aliases))  {
            return array_map(function ($value) {
                return $value; /*string*/
            }, $this->aliases);
        }
        throw new Exception('never get to this Technologies::aliases');
    }

    /**
     * @param array
     * @return bool
     * @throws Exception
     */
    public static function validateAliases(array $value): bool {
        if (!is_array($value)) {
            throw new Exception("Attribute Error:Technologies::aliases");
        }
        array_walk($value, function($value_v) {
            if (!is_string($value_v)) {
                throw new Exception("Attribute Error:Technologies::aliases");
            }
        });
        return true;
    }

    /**
     * @throws Exception
     * @return array
     */
    public function getAliases(): array {
        if (Technologies::validateAliases($this->aliases))  {
            return $this->aliases;
        }
        throw new Exception('never get to getAliases Technologies::aliases');
    }

    /**
     * @return array
     */
    public static function sampleAliases(): array {
        return  array(
            'Technologies::::31' /*31:*/
        ); /* 31:aliases*/
    }

    /**
     * Autodetect contains an expression of the form 'CONTENT in PATH' where CONTENT is afree-form unquoted string and PATH is a filepath relative to the work folder.If CONTENT is found in PATH, we consider that technology to be used in the work.
     *
     * @param array $value
     * @throws Exception
     * @return array
     */
    public static function fromAutodetect(array $value): array {
        return  array_map(function ($value) {
            return $value; /*string*/
        }, $value);
    }

    /**
     * Autodetect contains an expression of the form 'CONTENT in PATH' where CONTENT is afree-form unquoted string and PATH is a filepath relative to the work folder.If CONTENT is found in PATH, we consider that technology to be used in the work.
     *
     * @throws Exception
     * @return array
     */
    public function toAutodetect(): array {
        if (Technologies::validateAutodetect($this->autodetect))  {
            return array_map(function ($value) {
                return $value; /*string*/
            }, $this->autodetect);
        }
        throw new Exception('never get to this Technologies::autodetect');
    }

    /**
     * Autodetect contains an expression of the form 'CONTENT in PATH' where CONTENT is afree-form unquoted string and PATH is a filepath relative to the work folder.If CONTENT is found in PATH, we consider that technology to be used in the work.
     *
     * @param array
     * @return bool
     * @throws Exception
     */
    public static function validateAutodetect(array $value): bool {
        if (!is_array($value)) {
            throw new Exception("Attribute Error:Technologies::autodetect");
        }
        array_walk($value, function($value_v) {
            if (!is_string($value_v)) {
                throw new Exception("Attribute Error:Technologies::autodetect");
            }
        });
        return true;
    }

    /**
     * Autodetect contains an expression of the form 'CONTENT in PATH' where CONTENT is afree-form unquoted string and PATH is a filepath relative to the work folder.If CONTENT is found in PATH, we consider that technology to be used in the work.
     *
     * @throws Exception
     * @return array
     */
    public function getAutodetect(): array {
        if (Technologies::validateAutodetect($this->autodetect))  {
            return $this->autodetect;
        }
        throw new Exception('never get to getAutodetect Technologies::autodetect');
    }

    /**
     * Autodetect contains an expression of the form 'CONTENT in PATH' where CONTENT is afree-form unquoted string and PATH is a filepath relative to the work folder.If CONTENT is found in PATH, we consider that technology to be used in the work.
     *
     * @return array
     */
    public static function sampleAutodetect(): array {
        return  array(
            'Technologies::::32' /*32:*/
        ); /* 32:autodetect*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromBy(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toBy(): string {
        if (Technologies::validateBy($this->by))  {
            return $this->by; /*string*/
        }
        throw new Exception('never get to this Technologies::by');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateBy(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Technologies::by");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getBy(): string {
        if (Technologies::validateBy($this->by))  {
            return $this->by;
        }
        throw new Exception('never get to getBy Technologies::by');
    }

    /**
     * @return string
     */
    public static function sampleBy(): string {
        return 'Technologies::by::33'; /*33:by*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromDescription(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toDescription(): string {
        if (Technologies::validateDescription($this->description))  {
            return $this->description; /*string*/
        }
        throw new Exception('never get to this Technologies::description');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateDescription(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Technologies::description");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getDescription(): string {
        if (Technologies::validateDescription($this->description))  {
            return $this->description;
        }
        throw new Exception('never get to getDescription Technologies::description');
    }

    /**
     * @return string
     */
    public static function sampleDescription(): string {
        return 'Technologies::description::34'; /*34:description*/
    }

    /**
     * Files contains a list of gitignore-style patterns. If the work contains any of thepatterns specified, we consider that technology to be used in the work.
     *
     * @param array $value
     * @throws Exception
     * @return array
     */
    public static function fromFiles(array $value): array {
        return  array_map(function ($value) {
            return $value; /*string*/
        }, $value);
    }

    /**
     * Files contains a list of gitignore-style patterns. If the work contains any of thepatterns specified, we consider that technology to be used in the work.
     *
     * @throws Exception
     * @return array
     */
    public function toFiles(): array {
        if (Technologies::validateFiles($this->files))  {
            return array_map(function ($value) {
                return $value; /*string*/
            }, $this->files);
        }
        throw new Exception('never get to this Technologies::files');
    }

    /**
     * Files contains a list of gitignore-style patterns. If the work contains any of thepatterns specified, we consider that technology to be used in the work.
     *
     * @param array
     * @return bool
     * @throws Exception
     */
    public static function validateFiles(array $value): bool {
        if (!is_array($value)) {
            throw new Exception("Attribute Error:Technologies::files");
        }
        array_walk($value, function($value_v) {
            if (!is_string($value_v)) {
                throw new Exception("Attribute Error:Technologies::files");
            }
        });
        return true;
    }

    /**
     * Files contains a list of gitignore-style patterns. If the work contains any of thepatterns specified, we consider that technology to be used in the work.
     *
     * @throws Exception
     * @return array
     */
    public function getFiles(): array {
        if (Technologies::validateFiles($this->files))  {
            return $this->files;
        }
        throw new Exception('never get to getFiles Technologies::files');
    }

    /**
     * Files contains a list of gitignore-style patterns. If the work contains any of thepatterns specified, we consider that technology to be used in the work.
     *
     * @return array
     */
    public static function sampleFiles(): array {
        return  array(
            'Technologies::::35' /*35:*/
        ); /* 35:files*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromLearnMoreAt(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toLearnMoreAt(): string {
        if (Technologies::validateLearnMoreAt($this->learnMoreAt))  {
            return $this->learnMoreAt; /*string*/
        }
        throw new Exception('never get to this Technologies::learnMoreAt');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateLearnMoreAt(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Technologies::learnMoreAt");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getLearnMoreAt(): string {
        if (Technologies::validateLearnMoreAt($this->learnMoreAt))  {
            return $this->learnMoreAt;
        }
        throw new Exception('never get to getLearnMoreAt Technologies::learnMoreAt');
    }

    /**
     * @return string
     */
    public static function sampleLearnMoreAt(): string {
        return 'Technologies::learnMoreAt::36'; /*36:learnMoreAt*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromName(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toName(): string {
        if (Technologies::validateName($this->name))  {
            return $this->name; /*string*/
        }
        throw new Exception('never get to this Technologies::name');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateName(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Technologies::name");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getName(): string {
        if (Technologies::validateName($this->name))  {
            return $this->name;
        }
        throw new Exception('never get to getName Technologies::name');
    }

    /**
     * @return string
     */
    public static function sampleName(): string {
        return 'Technologies::name::37'; /*37:name*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromSlug(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toSlug(): string {
        if (Technologies::validateSlug($this->slug))  {
            return $this->slug; /*string*/
        }
        throw new Exception('never get to this Technologies::slug');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateSlug(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Technologies::slug");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getSlug(): string {
        if (Technologies::validateSlug($this->slug))  {
            return $this->slug;
        }
        throw new Exception('never get to getSlug Technologies::slug');
    }

    /**
     * @return string
     */
    public static function sampleSlug(): string {
        return 'Technologies::slug::38'; /*38:slug*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return Technologies::validateAliases($this->aliases)
        || Technologies::validateAutodetect($this->autodetect)
        || Technologies::validateBy($this->by)
        || Technologies::validateDescription($this->description)
        || Technologies::validateFiles($this->files)
        || Technologies::validateLearnMoreAt($this->learnMoreAt)
        || Technologies::validateName($this->name)
        || Technologies::validateSlug($this->slug);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'aliases'} = $this->toAliases();
        $out->{'autodetect'} = $this->toAutodetect();
        $out->{'by'} = $this->toBy();
        $out->{'description'} = $this->toDescription();
        $out->{'files'} = $this->toFiles();
        $out->{'learn more at'} = $this->toLearnMoreAt();
        $out->{'name'} = $this->toName();
        $out->{'slug'} = $this->toSlug();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return Technologies
     * @throws Exception
     */
    public static function from(stdClass $obj): Technologies {
        return new Technologies(
         Technologies::fromAliases($obj->{'aliases'})
        ,Technologies::fromAutodetect($obj->{'autodetect'})
        ,Technologies::fromBy($obj->{'by'})
        ,Technologies::fromDescription($obj->{'description'})
        ,Technologies::fromFiles($obj->{'files'})
        ,Technologies::fromLearnMoreAt($obj->{'learn more at'})
        ,Technologies::fromName($obj->{'name'})
        ,Technologies::fromSlug($obj->{'slug'})
        );
    }

    /**
     * @return Technologies
     */
    public static function sample(): Technologies {
        return new Technologies(
         Technologies::sampleAliases()
        ,Technologies::sampleAutodetect()
        ,Technologies::sampleBy()
        ,Technologies::sampleDescription()
        ,Technologies::sampleFiles()
        ,Technologies::sampleLearnMoreAt()
        ,Technologies::sampleName()
        ,Technologies::sampleSlug()
        );
    }
}
