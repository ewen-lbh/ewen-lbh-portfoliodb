<?php

namespace Ortfo\Db;

// This is a autogenerated file:Configuration

class Configuration {
    private string $buildMetadataFile; // json:build metadata file Required
    private ?stdClass $exporters; // json:exporters Optional
    private ExtractColors $extractColors; // json:extract colors Required
    private MakeGifs $makeGifs; // json:make gifs Required
    private MakeThumbnails $makeThumbnails; // json:make thumbnails Required
    private Media $media; // json:media Required
    private string $projectsAt; // json:projects at Required
    private string $scatteredModeFolder; // json:scattered mode folder Required
    private Tags $tags; // json:tags Required
    private Technologies $technologies; // json:technologies Required

    /**
     * @param string $buildMetadataFile
     * @param stdClass|null $exporters
     * @param ExtractColors $extractColors
     * @param MakeGifs $makeGifs
     * @param MakeThumbnails $makeThumbnails
     * @param Media $media
     * @param string $projectsAt
     * @param string $scatteredModeFolder
     * @param Tags $tags
     * @param Technologies $technologies
     */
    public function __construct(string $buildMetadataFile, ?stdClass $exporters, ExtractColors $extractColors, MakeGifs $makeGifs, MakeThumbnails $makeThumbnails, Media $media, string $projectsAt, string $scatteredModeFolder, Tags $tags, Technologies $technologies) {
        $this->buildMetadataFile = $buildMetadataFile;
        $this->exporters = $exporters;
        $this->extractColors = $extractColors;
        $this->makeGifs = $makeGifs;
        $this->makeThumbnails = $makeThumbnails;
        $this->media = $media;
        $this->projectsAt = $projectsAt;
        $this->scatteredModeFolder = $scatteredModeFolder;
        $this->tags = $tags;
        $this->technologies = $technologies;
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromBuildMetadataFile(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toBuildMetadataFile(): string {
        if (Configuration::validateBuildMetadataFile($this->buildMetadataFile))  {
            return $this->buildMetadataFile; /*string*/
        }
        throw new Exception('never get to this Configuration::buildMetadataFile');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateBuildMetadataFile(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Configuration::buildMetadataFile");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getBuildMetadataFile(): string {
        if (Configuration::validateBuildMetadataFile($this->buildMetadataFile))  {
            return $this->buildMetadataFile;
        }
        throw new Exception('never get to getBuildMetadataFile Configuration::buildMetadataFile');
    }

    /**
     * @return string
     */
    public static function sampleBuildMetadataFile(): string {
        return 'Configuration::buildMetadataFile::31'; /*31:buildMetadataFile*/
    }

    /**
     * Exporter-specific configuration. Maps exporter names to their configuration.
     *
     * @param ?stdClass $value
     * @throws Exception
     * @return ?stdClass
     */
    public static function fromExporters(?stdClass $value): ?stdClass {
        if (!is_null($value)) {
            function from($my): stdClass {
                $out = new stdClass();
                foreach ($my as $k => $v) {
                    function from($my): stdClass {
                        $out = new stdClass();
                        foreach ($my as $k => $v) {
                            $out->$k = $v; /*any*/
                        }
                        return $out;
                    }
                    return from($v);
                }
                return $out;
            }
            return from($value);
        } else {
            return null;
        }
    }

    /**
     * Exporter-specific configuration. Maps exporter names to their configuration.
     *
     * @throws Exception
     * @return ?stdClass
     */
    public function toExporters(): ?stdClass {
        if (Configuration::validateExporters($this->exporters))  {
            if (!is_null($this->exporters)) {
                function to($my): stdClass {
                    $out = new stdClass();
                    foreach ($my as $k => $v) {
                        function to($my): stdClass {
                            $out = new stdClass();
                            foreach ($my as $k => $v) {
                                $my->$k = $v; /*any*/
                            }
                            return $out;
                        }
                        return to($v);
                    }
                    return $out;
                }
                return to($this->exporters);
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Configuration::exporters');
    }

    /**
     * Exporter-specific configuration. Maps exporter names to their configuration.
     *
     * @param stdClass|null
     * @return bool
     * @throws Exception
     */
    public static function validateExporters(?stdClass $value): bool {
        if (!is_null($value)) {
            foreach ($value as $k => $v) {
                foreach ($v as $k => $v) {
                    if (!defined($v)) {
                        throw new Exception("Attribute Error:Configuration::exporters");
                    }
                }
            }
        }
        return true;
    }

    /**
     * Exporter-specific configuration. Maps exporter names to their configuration.
     *
     * @throws Exception
     * @return ?stdClass
     */
    public function getExporters(): ?stdClass {
        if (Configuration::validateExporters($this->exporters))  {
            return $this->exporters;
        }
        throw new Exception('never get to getExporters Configuration::exporters');
    }

    /**
     * Exporter-specific configuration. Maps exporter names to their configuration.
     *
     * @return ?stdClass
     */
    public static function sampleExporters(): ?stdClass {
        function sample(): stdClass {
            $out = new stdClass();
            function sample(): stdClass {
                $out = new stdClass();
                $out->{'Configuration'} = 'AnyType::Configuration::exporters::32';/*32:exporters*/
                return $out;
            }
            return sample();
            return $out;
        }
        return sample();
    }

    /**
     * @param stdClass $value
     * @throws Exception
     * @return ExtractColors
     */
    public static function fromExtractColors(stdClass $value): ExtractColors {
        return ExtractColors::from($value); /*class*/
    }

    /**
     * @throws Exception
     * @return stdClass
     */
    public function toExtractColors(): stdClass {
        if (Configuration::validateExtractColors($this->extractColors))  {
            return $this->extractColors->to(); /*class*/
        }
        throw new Exception('never get to this Configuration::extractColors');
    }

    /**
     * @param ExtractColors
     * @return bool
     * @throws Exception
     */
    public static function validateExtractColors(ExtractColors $value): bool {
        $value->validate();
        return true;
    }

    /**
     * @throws Exception
     * @return ExtractColors
     */
    public function getExtractColors(): ExtractColors {
        if (Configuration::validateExtractColors($this->extractColors))  {
            return $this->extractColors;
        }
        throw new Exception('never get to getExtractColors Configuration::extractColors');
    }

    /**
     * @return ExtractColors
     */
    public static function sampleExtractColors(): ExtractColors {
        return ExtractColors::sample(); /*33:extractColors*/
    }

    /**
     * @param stdClass $value
     * @throws Exception
     * @return MakeGifs
     */
    public static function fromMakeGifs(stdClass $value): MakeGifs {
        return MakeGifs::from($value); /*class*/
    }

    /**
     * @throws Exception
     * @return stdClass
     */
    public function toMakeGifs(): stdClass {
        if (Configuration::validateMakeGifs($this->makeGifs))  {
            return $this->makeGifs->to(); /*class*/
        }
        throw new Exception('never get to this Configuration::makeGifs');
    }

    /**
     * @param MakeGifs
     * @return bool
     * @throws Exception
     */
    public static function validateMakeGifs(MakeGifs $value): bool {
        $value->validate();
        return true;
    }

    /**
     * @throws Exception
     * @return MakeGifs
     */
    public function getMakeGifs(): MakeGifs {
        if (Configuration::validateMakeGifs($this->makeGifs))  {
            return $this->makeGifs;
        }
        throw new Exception('never get to getMakeGifs Configuration::makeGifs');
    }

    /**
     * @return MakeGifs
     */
    public static function sampleMakeGifs(): MakeGifs {
        return MakeGifs::sample(); /*34:makeGifs*/
    }

    /**
     * @param stdClass $value
     * @throws Exception
     * @return MakeThumbnails
     */
    public static function fromMakeThumbnails(stdClass $value): MakeThumbnails {
        return MakeThumbnails::from($value); /*class*/
    }

    /**
     * @throws Exception
     * @return stdClass
     */
    public function toMakeThumbnails(): stdClass {
        if (Configuration::validateMakeThumbnails($this->makeThumbnails))  {
            return $this->makeThumbnails->to(); /*class*/
        }
        throw new Exception('never get to this Configuration::makeThumbnails');
    }

    /**
     * @param MakeThumbnails
     * @return bool
     * @throws Exception
     */
    public static function validateMakeThumbnails(MakeThumbnails $value): bool {
        $value->validate();
        return true;
    }

    /**
     * @throws Exception
     * @return MakeThumbnails
     */
    public function getMakeThumbnails(): MakeThumbnails {
        if (Configuration::validateMakeThumbnails($this->makeThumbnails))  {
            return $this->makeThumbnails;
        }
        throw new Exception('never get to getMakeThumbnails Configuration::makeThumbnails');
    }

    /**
     * @return MakeThumbnails
     */
    public static function sampleMakeThumbnails(): MakeThumbnails {
        return MakeThumbnails::sample(); /*35:makeThumbnails*/
    }

    /**
     * @param stdClass $value
     * @throws Exception
     * @return Media
     */
    public static function fromMedia(stdClass $value): Media {
        return Media::from($value); /*class*/
    }

    /**
     * @throws Exception
     * @return stdClass
     */
    public function toMedia(): stdClass {
        if (Configuration::validateMedia($this->media))  {
            return $this->media->to(); /*class*/
        }
        throw new Exception('never get to this Configuration::media');
    }

    /**
     * @param Media
     * @return bool
     * @throws Exception
     */
    public static function validateMedia(Media $value): bool {
        $value->validate();
        return true;
    }

    /**
     * @throws Exception
     * @return Media
     */
    public function getMedia(): Media {
        if (Configuration::validateMedia($this->media))  {
            return $this->media;
        }
        throw new Exception('never get to getMedia Configuration::media');
    }

    /**
     * @return Media
     */
    public static function sampleMedia(): Media {
        return Media::sample(); /*36:media*/
    }

    /**
     * Path to the directory containing all projects. Must be absolute.
     *
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromProjectsAt(string $value): string {
        return $value; /*string*/
    }

    /**
     * Path to the directory containing all projects. Must be absolute.
     *
     * @throws Exception
     * @return string
     */
    public function toProjectsAt(): string {
        if (Configuration::validateProjectsAt($this->projectsAt))  {
            return $this->projectsAt; /*string*/
        }
        throw new Exception('never get to this Configuration::projectsAt');
    }

    /**
     * Path to the directory containing all projects. Must be absolute.
     *
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateProjectsAt(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Configuration::projectsAt");
        }
        return true;
    }

    /**
     * Path to the directory containing all projects. Must be absolute.
     *
     * @throws Exception
     * @return string
     */
    public function getProjectsAt(): string {
        if (Configuration::validateProjectsAt($this->projectsAt))  {
            return $this->projectsAt;
        }
        throw new Exception('never get to getProjectsAt Configuration::projectsAt');
    }

    /**
     * Path to the directory containing all projects. Must be absolute.
     *
     * @return string
     */
    public static function sampleProjectsAt(): string {
        return 'Configuration::projectsAt::37'; /*37:projectsAt*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromScatteredModeFolder(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toScatteredModeFolder(): string {
        if (Configuration::validateScatteredModeFolder($this->scatteredModeFolder))  {
            return $this->scatteredModeFolder; /*string*/
        }
        throw new Exception('never get to this Configuration::scatteredModeFolder');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateScatteredModeFolder(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Configuration::scatteredModeFolder");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getScatteredModeFolder(): string {
        if (Configuration::validateScatteredModeFolder($this->scatteredModeFolder))  {
            return $this->scatteredModeFolder;
        }
        throw new Exception('never get to getScatteredModeFolder Configuration::scatteredModeFolder');
    }

    /**
     * @return string
     */
    public static function sampleScatteredModeFolder(): string {
        return 'Configuration::scatteredModeFolder::38'; /*38:scatteredModeFolder*/
    }

    /**
     * @param stdClass $value
     * @throws Exception
     * @return Tags
     */
    public static function fromTags(stdClass $value): Tags {
        return Tags::from($value); /*class*/
    }

    /**
     * @throws Exception
     * @return stdClass
     */
    public function toTags(): stdClass {
        if (Configuration::validateTags($this->tags))  {
            return $this->tags->to(); /*class*/
        }
        throw new Exception('never get to this Configuration::tags');
    }

    /**
     * @param Tags
     * @return bool
     * @throws Exception
     */
    public static function validateTags(Tags $value): bool {
        $value->validate();
        return true;
    }

    /**
     * @throws Exception
     * @return Tags
     */
    public function getTags(): Tags {
        if (Configuration::validateTags($this->tags))  {
            return $this->tags;
        }
        throw new Exception('never get to getTags Configuration::tags');
    }

    /**
     * @return Tags
     */
    public static function sampleTags(): Tags {
        return Tags::sample(); /*39:tags*/
    }

    /**
     * @param stdClass $value
     * @throws Exception
     * @return Technologies
     */
    public static function fromTechnologies(stdClass $value): Technologies {
        return Technologies::from($value); /*class*/
    }

    /**
     * @throws Exception
     * @return stdClass
     */
    public function toTechnologies(): stdClass {
        if (Configuration::validateTechnologies($this->technologies))  {
            return $this->technologies->to(); /*class*/
        }
        throw new Exception('never get to this Configuration::technologies');
    }

    /**
     * @param Technologies
     * @return bool
     * @throws Exception
     */
    public static function validateTechnologies(Technologies $value): bool {
        $value->validate();
        return true;
    }

    /**
     * @throws Exception
     * @return Technologies
     */
    public function getTechnologies(): Technologies {
        if (Configuration::validateTechnologies($this->technologies))  {
            return $this->technologies;
        }
        throw new Exception('never get to getTechnologies Configuration::technologies');
    }

    /**
     * @return Technologies
     */
    public static function sampleTechnologies(): Technologies {
        return Technologies::sample(); /*40:technologies*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return Configuration::validateBuildMetadataFile($this->buildMetadataFile)
        || Configuration::validateExporters($this->exporters)
        || Configuration::validateExtractColors($this->extractColors)
        || Configuration::validateMakeGifs($this->makeGifs)
        || Configuration::validateMakeThumbnails($this->makeThumbnails)
        || Configuration::validateMedia($this->media)
        || Configuration::validateProjectsAt($this->projectsAt)
        || Configuration::validateScatteredModeFolder($this->scatteredModeFolder)
        || Configuration::validateTags($this->tags)
        || Configuration::validateTechnologies($this->technologies);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'build metadata file'} = $this->toBuildMetadataFile();
        $out->{'exporters'} = $this->toExporters();
        $out->{'extract colors'} = $this->toExtractColors();
        $out->{'make gifs'} = $this->toMakeGifs();
        $out->{'make thumbnails'} = $this->toMakeThumbnails();
        $out->{'media'} = $this->toMedia();
        $out->{'projects at'} = $this->toProjectsAt();
        $out->{'scattered mode folder'} = $this->toScatteredModeFolder();
        $out->{'tags'} = $this->toTags();
        $out->{'technologies'} = $this->toTechnologies();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return Configuration
     * @throws Exception
     */
    public static function from(stdClass $obj): Configuration {
        return new Configuration(
         Configuration::fromBuildMetadataFile($obj->{'build metadata file'})
        ,Configuration::fromExporters($obj->{'exporters'})
        ,Configuration::fromExtractColors($obj->{'extract colors'})
        ,Configuration::fromMakeGifs($obj->{'make gifs'})
        ,Configuration::fromMakeThumbnails($obj->{'make thumbnails'})
        ,Configuration::fromMedia($obj->{'media'})
        ,Configuration::fromProjectsAt($obj->{'projects at'})
        ,Configuration::fromScatteredModeFolder($obj->{'scattered mode folder'})
        ,Configuration::fromTags($obj->{'tags'})
        ,Configuration::fromTechnologies($obj->{'technologies'})
        );
    }

    /**
     * @return Configuration
     */
    public static function sample(): Configuration {
        return new Configuration(
         Configuration::sampleBuildMetadataFile()
        ,Configuration::sampleExporters()
        ,Configuration::sampleExtractColors()
        ,Configuration::sampleMakeGifs()
        ,Configuration::sampleMakeThumbnails()
        ,Configuration::sampleMedia()
        ,Configuration::sampleProjectsAt()
        ,Configuration::sampleScatteredModeFolder()
        ,Configuration::sampleTags()
        ,Configuration::sampleTechnologies()
        );
    }
}

// This is a autogenerated file:ExtractColors

class ExtractColors {
    private array $defaultFiles; // json:default files Required
    private bool $enabled; // json:enabled Required
    private array $extract; // json:extract Required

    /**
     * @param array $defaultFiles
     * @param bool $enabled
     * @param array $extract
     */
    public function __construct(array $defaultFiles, bool $enabled, array $extract) {
        $this->defaultFiles = $defaultFiles;
        $this->enabled = $enabled;
        $this->extract = $extract;
    }

    /**
     * @param array $value
     * @throws Exception
     * @return array
     */
    public static function fromDefaultFiles(array $value): array {
        return  array_map(function ($value) {
            return $value; /*string*/
        }, $value);
    }

    /**
     * @throws Exception
     * @return array
     */
    public function toDefaultFiles(): array {
        if (ExtractColors::validateDefaultFiles($this->defaultFiles))  {
            return array_map(function ($value) {
                return $value; /*string*/
            }, $this->defaultFiles);
        }
        throw new Exception('never get to this ExtractColors::defaultFiles');
    }

    /**
     * @param array
     * @return bool
     * @throws Exception
     */
    public static function validateDefaultFiles(array $value): bool {
        if (!is_array($value)) {
            throw new Exception("Attribute Error:ExtractColors::defaultFiles");
        }
        array_walk($value, function($value_v) {
            if (!is_string($value_v)) {
                throw new Exception("Attribute Error:ExtractColors::defaultFiles");
            }
        });
        return true;
    }

    /**
     * @throws Exception
     * @return array
     */
    public function getDefaultFiles(): array {
        if (ExtractColors::validateDefaultFiles($this->defaultFiles))  {
            return $this->defaultFiles;
        }
        throw new Exception('never get to getDefaultFiles ExtractColors::defaultFiles');
    }

    /**
     * @return array
     */
    public static function sampleDefaultFiles(): array {
        return  array(
            'ExtractColors::::31' /*31:*/
        ); /* 31:defaultFiles*/
    }

    /**
     * @param bool $value
     * @throws Exception
     * @return bool
     */
    public static function fromEnabled(bool $value): bool {
        return $value; /*bool*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function toEnabled(): bool {
        if (ExtractColors::validateEnabled($this->enabled))  {
            return $this->enabled; /*bool*/
        }
        throw new Exception('never get to this ExtractColors::enabled');
    }

    /**
     * @param bool
     * @return bool
     * @throws Exception
     */
    public static function validateEnabled(bool $value): bool {
        if (!is_bool($value)) {
            throw new Exception("Attribute Error:ExtractColors::enabled");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function getEnabled(): bool {
        if (ExtractColors::validateEnabled($this->enabled))  {
            return $this->enabled;
        }
        throw new Exception('never get to getEnabled ExtractColors::enabled');
    }

    /**
     * @return bool
     */
    public static function sampleEnabled(): bool {
        return true; /*32:enabled*/
    }

    /**
     * @param array $value
     * @throws Exception
     * @return array
     */
    public static function fromExtract(array $value): array {
        return  array_map(function ($value) {
            return $value; /*string*/
        }, $value);
    }

    /**
     * @throws Exception
     * @return array
     */
    public function toExtract(): array {
        if (ExtractColors::validateExtract($this->extract))  {
            return array_map(function ($value) {
                return $value; /*string*/
            }, $this->extract);
        }
        throw new Exception('never get to this ExtractColors::extract');
    }

    /**
     * @param array
     * @return bool
     * @throws Exception
     */
    public static function validateExtract(array $value): bool {
        if (!is_array($value)) {
            throw new Exception("Attribute Error:ExtractColors::extract");
        }
        array_walk($value, function($value_v) {
            if (!is_string($value_v)) {
                throw new Exception("Attribute Error:ExtractColors::extract");
            }
        });
        return true;
    }

    /**
     * @throws Exception
     * @return array
     */
    public function getExtract(): array {
        if (ExtractColors::validateExtract($this->extract))  {
            return $this->extract;
        }
        throw new Exception('never get to getExtract ExtractColors::extract');
    }

    /**
     * @return array
     */
    public static function sampleExtract(): array {
        return  array(
            'ExtractColors::::33' /*33:*/
        ); /* 33:extract*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return ExtractColors::validateDefaultFiles($this->defaultFiles)
        || ExtractColors::validateEnabled($this->enabled)
        || ExtractColors::validateExtract($this->extract);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'default files'} = $this->toDefaultFiles();
        $out->{'enabled'} = $this->toEnabled();
        $out->{'extract'} = $this->toExtract();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return ExtractColors
     * @throws Exception
     */
    public static function from(stdClass $obj): ExtractColors {
        return new ExtractColors(
         ExtractColors::fromDefaultFiles($obj->{'default files'})
        ,ExtractColors::fromEnabled($obj->{'enabled'})
        ,ExtractColors::fromExtract($obj->{'extract'})
        );
    }

    /**
     * @return ExtractColors
     */
    public static function sample(): ExtractColors {
        return new ExtractColors(
         ExtractColors::sampleDefaultFiles()
        ,ExtractColors::sampleEnabled()
        ,ExtractColors::sampleExtract()
        );
    }
}

// This is a autogenerated file:MakeGifs

class MakeGifs {
    private bool $enabled; // json:enabled Required
    private string $fileNameTemplate; // json:file name template Required

    /**
     * @param bool $enabled
     * @param string $fileNameTemplate
     */
    public function __construct(bool $enabled, string $fileNameTemplate) {
        $this->enabled = $enabled;
        $this->fileNameTemplate = $fileNameTemplate;
    }

    /**
     * @param bool $value
     * @throws Exception
     * @return bool
     */
    public static function fromEnabled(bool $value): bool {
        return $value; /*bool*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function toEnabled(): bool {
        if (MakeGifs::validateEnabled($this->enabled))  {
            return $this->enabled; /*bool*/
        }
        throw new Exception('never get to this MakeGifs::enabled');
    }

    /**
     * @param bool
     * @return bool
     * @throws Exception
     */
    public static function validateEnabled(bool $value): bool {
        if (!is_bool($value)) {
            throw new Exception("Attribute Error:MakeGifs::enabled");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function getEnabled(): bool {
        if (MakeGifs::validateEnabled($this->enabled))  {
            return $this->enabled;
        }
        throw new Exception('never get to getEnabled MakeGifs::enabled');
    }

    /**
     * @return bool
     */
    public static function sampleEnabled(): bool {
        return true; /*31:enabled*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromFileNameTemplate(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toFileNameTemplate(): string {
        if (MakeGifs::validateFileNameTemplate($this->fileNameTemplate))  {
            return $this->fileNameTemplate; /*string*/
        }
        throw new Exception('never get to this MakeGifs::fileNameTemplate');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateFileNameTemplate(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:MakeGifs::fileNameTemplate");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getFileNameTemplate(): string {
        if (MakeGifs::validateFileNameTemplate($this->fileNameTemplate))  {
            return $this->fileNameTemplate;
        }
        throw new Exception('never get to getFileNameTemplate MakeGifs::fileNameTemplate');
    }

    /**
     * @return string
     */
    public static function sampleFileNameTemplate(): string {
        return 'MakeGifs::fileNameTemplate::32'; /*32:fileNameTemplate*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return MakeGifs::validateEnabled($this->enabled)
        || MakeGifs::validateFileNameTemplate($this->fileNameTemplate);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'enabled'} = $this->toEnabled();
        $out->{'file name template'} = $this->toFileNameTemplate();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return MakeGifs
     * @throws Exception
     */
    public static function from(stdClass $obj): MakeGifs {
        return new MakeGifs(
         MakeGifs::fromEnabled($obj->{'enabled'})
        ,MakeGifs::fromFileNameTemplate($obj->{'file name template'})
        );
    }

    /**
     * @return MakeGifs
     */
    public static function sample(): MakeGifs {
        return new MakeGifs(
         MakeGifs::sampleEnabled()
        ,MakeGifs::sampleFileNameTemplate()
        );
    }
}

// This is a autogenerated file:MakeThumbnails

class MakeThumbnails {
    private bool $enabled; // json:enabled Required
    private string $fileNameTemplate; // json:file name template Required
    private string $inputFile; // json:input file Required
    private array $sizes; // json:sizes Required

    /**
     * @param bool $enabled
     * @param string $fileNameTemplate
     * @param string $inputFile
     * @param array $sizes
     */
    public function __construct(bool $enabled, string $fileNameTemplate, string $inputFile, array $sizes) {
        $this->enabled = $enabled;
        $this->fileNameTemplate = $fileNameTemplate;
        $this->inputFile = $inputFile;
        $this->sizes = $sizes;
    }

    /**
     * @param bool $value
     * @throws Exception
     * @return bool
     */
    public static function fromEnabled(bool $value): bool {
        return $value; /*bool*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function toEnabled(): bool {
        if (MakeThumbnails::validateEnabled($this->enabled))  {
            return $this->enabled; /*bool*/
        }
        throw new Exception('never get to this MakeThumbnails::enabled');
    }

    /**
     * @param bool
     * @return bool
     * @throws Exception
     */
    public static function validateEnabled(bool $value): bool {
        if (!is_bool($value)) {
            throw new Exception("Attribute Error:MakeThumbnails::enabled");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function getEnabled(): bool {
        if (MakeThumbnails::validateEnabled($this->enabled))  {
            return $this->enabled;
        }
        throw new Exception('never get to getEnabled MakeThumbnails::enabled');
    }

    /**
     * @return bool
     */
    public static function sampleEnabled(): bool {
        return true; /*31:enabled*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromFileNameTemplate(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toFileNameTemplate(): string {
        if (MakeThumbnails::validateFileNameTemplate($this->fileNameTemplate))  {
            return $this->fileNameTemplate; /*string*/
        }
        throw new Exception('never get to this MakeThumbnails::fileNameTemplate');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateFileNameTemplate(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:MakeThumbnails::fileNameTemplate");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getFileNameTemplate(): string {
        if (MakeThumbnails::validateFileNameTemplate($this->fileNameTemplate))  {
            return $this->fileNameTemplate;
        }
        throw new Exception('never get to getFileNameTemplate MakeThumbnails::fileNameTemplate');
    }

    /**
     * @return string
     */
    public static function sampleFileNameTemplate(): string {
        return 'MakeThumbnails::fileNameTemplate::32'; /*32:fileNameTemplate*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromInputFile(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toInputFile(): string {
        if (MakeThumbnails::validateInputFile($this->inputFile))  {
            return $this->inputFile; /*string*/
        }
        throw new Exception('never get to this MakeThumbnails::inputFile');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateInputFile(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:MakeThumbnails::inputFile");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getInputFile(): string {
        if (MakeThumbnails::validateInputFile($this->inputFile))  {
            return $this->inputFile;
        }
        throw new Exception('never get to getInputFile MakeThumbnails::inputFile');
    }

    /**
     * @return string
     */
    public static function sampleInputFile(): string {
        return 'MakeThumbnails::inputFile::33'; /*33:inputFile*/
    }

    /**
     * @param array $value
     * @throws Exception
     * @return array
     */
    public static function fromSizes(array $value): array {
        return  array_map(function ($value) {
            return $value; /*int*/
        }, $value);
    }

    /**
     * @throws Exception
     * @return array
     */
    public function toSizes(): array {
        if (MakeThumbnails::validateSizes($this->sizes))  {
            return array_map(function ($value) {
                return $value; /*int*/
            }, $this->sizes);
        }
        throw new Exception('never get to this MakeThumbnails::sizes');
    }

    /**
     * @param array
     * @return bool
     * @throws Exception
     */
    public static function validateSizes(array $value): bool {
        if (!is_array($value)) {
            throw new Exception("Attribute Error:MakeThumbnails::sizes");
        }
        array_walk($value, function($value_v) {
            if (!is_integer($value_v)) {
                throw new Exception("Attribute Error:MakeThumbnails::sizes");
            }
        });
        return true;
    }

    /**
     * @throws Exception
     * @return array
     */
    public function getSizes(): array {
        if (MakeThumbnails::validateSizes($this->sizes))  {
            return $this->sizes;
        }
        throw new Exception('never get to getSizes MakeThumbnails::sizes');
    }

    /**
     * @return array
     */
    public static function sampleSizes(): array {
        return  array(
            34 /*34:*/
        ); /* 34:sizes*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return MakeThumbnails::validateEnabled($this->enabled)
        || MakeThumbnails::validateFileNameTemplate($this->fileNameTemplate)
        || MakeThumbnails::validateInputFile($this->inputFile)
        || MakeThumbnails::validateSizes($this->sizes);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'enabled'} = $this->toEnabled();
        $out->{'file name template'} = $this->toFileNameTemplate();
        $out->{'input file'} = $this->toInputFile();
        $out->{'sizes'} = $this->toSizes();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return MakeThumbnails
     * @throws Exception
     */
    public static function from(stdClass $obj): MakeThumbnails {
        return new MakeThumbnails(
         MakeThumbnails::fromEnabled($obj->{'enabled'})
        ,MakeThumbnails::fromFileNameTemplate($obj->{'file name template'})
        ,MakeThumbnails::fromInputFile($obj->{'input file'})
        ,MakeThumbnails::fromSizes($obj->{'sizes'})
        );
    }

    /**
     * @return MakeThumbnails
     */
    public static function sample(): MakeThumbnails {
        return new MakeThumbnails(
         MakeThumbnails::sampleEnabled()
        ,MakeThumbnails::sampleFileNameTemplate()
        ,MakeThumbnails::sampleInputFile()
        ,MakeThumbnails::sampleSizes()
        );
    }
}

// This is a autogenerated file:Media

class Media {
    private string $at; // json:at Required

    /**
     * @param string $at
     */
    public function __construct(string $at) {
        $this->at = $at;
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromAt(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toAt(): string {
        if (Media::validateAt($this->at))  {
            return $this->at; /*string*/
        }
        throw new Exception('never get to this Media::at');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateAt(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Media::at");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getAt(): string {
        if (Media::validateAt($this->at))  {
            return $this->at;
        }
        throw new Exception('never get to getAt Media::at');
    }

    /**
     * @return string
     */
    public static function sampleAt(): string {
        return 'Media::at::31'; /*31:at*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return Media::validateAt($this->at);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'at'} = $this->toAt();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return Media
     * @throws Exception
     */
    public static function from(stdClass $obj): Media {
        return new Media(
         Media::fromAt($obj->{'at'})
        );
    }

    /**
     * @return Media
     */
    public static function sample(): Media {
        return new Media(
         Media::sampleAt()
        );
    }
}

// This is a autogenerated file:Tags

class Tags {
    private string $repository; // json:repository Required

    /**
     * @param string $repository
     */
    public function __construct(string $repository) {
        $this->repository = $repository;
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromRepository(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toRepository(): string {
        if (Tags::validateRepository($this->repository))  {
            return $this->repository; /*string*/
        }
        throw new Exception('never get to this Tags::repository');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateRepository(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Tags::repository");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getRepository(): string {
        if (Tags::validateRepository($this->repository))  {
            return $this->repository;
        }
        throw new Exception('never get to getRepository Tags::repository');
    }

    /**
     * @return string
     */
    public static function sampleRepository(): string {
        return 'Tags::repository::31'; /*31:repository*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return Tags::validateRepository($this->repository);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'repository'} = $this->toRepository();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return Tags
     * @throws Exception
     */
    public static function from(stdClass $obj): Tags {
        return new Tags(
         Tags::fromRepository($obj->{'repository'})
        );
    }

    /**
     * @return Tags
     */
    public static function sample(): Tags {
        return new Tags(
         Tags::sampleRepository()
        );
    }
}

// This is a autogenerated file:Technologies

class Technologies {
    private string $repository; // json:repository Required

    /**
     * @param string $repository
     */
    public function __construct(string $repository) {
        $this->repository = $repository;
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromRepository(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toRepository(): string {
        if (Technologies::validateRepository($this->repository))  {
            return $this->repository; /*string*/
        }
        throw new Exception('never get to this Technologies::repository');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateRepository(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Technologies::repository");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getRepository(): string {
        if (Technologies::validateRepository($this->repository))  {
            return $this->repository;
        }
        throw new Exception('never get to getRepository Technologies::repository');
    }

    /**
     * @return string
     */
    public static function sampleRepository(): string {
        return 'Technologies::repository::31'; /*31:repository*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return Technologies::validateRepository($this->repository);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'repository'} = $this->toRepository();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return Technologies
     * @throws Exception
     */
    public static function from(stdClass $obj): Technologies {
        return new Technologies(
         Technologies::fromRepository($obj->{'repository'})
        );
    }

    /**
     * @return Technologies
     */
    public static function sample(): Technologies {
        return new Technologies(
         Technologies::sampleRepository()
        );
    }
}
