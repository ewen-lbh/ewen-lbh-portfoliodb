<?php

namespace Ortfo\Db;

// This is a autogenerated file:Configuration

class Configuration {
    private ?stdClass $exporters; // json:exporters Optional
    private ?ExtractColorsConfiguration $extractColors; // json:extract colors Optional
    private ?MakeGIFSConfiguration $makeGifs; // json:make gifs Optional
    private ?MakeThumbnailsConfiguration $makeThumbnails; // json:make thumbnails Optional
    private ?MediaConfiguration $media; // json:media Optional
    private string $projectsAt; // json:projects at Required
    private string $scatteredModeFolder; // json:scattered mode folder Required
    private ?TagsConfiguration $tags; // json:tags Optional
    private ?TechnologiesConfiguration $technologies; // json:technologies Optional

    /**
     * @param stdClass|null $exporters
     * @param ExtractColorsConfiguration|null $extractColors
     * @param MakeGIFSConfiguration|null $makeGifs
     * @param MakeThumbnailsConfiguration|null $makeThumbnails
     * @param MediaConfiguration|null $media
     * @param string $projectsAt
     * @param string $scatteredModeFolder
     * @param TagsConfiguration|null $tags
     * @param TechnologiesConfiguration|null $technologies
     */
    public function __construct(?stdClass $exporters, ?ExtractColorsConfiguration $extractColors, ?MakeGIFSConfiguration $makeGifs, ?MakeThumbnailsConfiguration $makeThumbnails, ?MediaConfiguration $media, string $projectsAt, string $scatteredModeFolder, ?TagsConfiguration $tags, ?TechnologiesConfiguration $technologies) {
        $this->exporters = $exporters;
        $this->extractColors = $extractColors;
        $this->makeGifs = $makeGifs;
        $this->makeThumbnails = $makeThumbnails;
        $this->media = $media;
        $this->projectsAt = $projectsAt;
        $this->scatteredModeFolder = $scatteredModeFolder;
        $this->tags = $tags;
        $this->technologies = $technologies;
    }

    /**
     * Exporter-specific configuration. Maps exporter names to their configuration.
     *
     * @param ?stdClass $value
     * @throws Exception
     * @return ?stdClass
     */
    public static function fromExporters(?stdClass $value): ?stdClass {
        if (!is_null($value)) {
            function from($my): stdClass {
                $out = new stdClass();
                foreach ($my as $k => $v) {
                    function from($my): stdClass {
                        $out = new stdClass();
                        foreach ($my as $k => $v) {
                            $out->$k = $v; /*any*/
                        }
                        return $out;
                    }
                    return from($v);
                }
                return $out;
            }
            return from($value);
        } else {
            return null;
        }
    }

    /**
     * Exporter-specific configuration. Maps exporter names to their configuration.
     *
     * @throws Exception
     * @return ?stdClass
     */
    public function toExporters(): ?stdClass {
        if (Configuration::validateExporters($this->exporters))  {
            if (!is_null($this->exporters)) {
                function to($my): stdClass {
                    $out = new stdClass();
                    foreach ($my as $k => $v) {
                        function to($my): stdClass {
                            $out = new stdClass();
                            foreach ($my as $k => $v) {
                                $my->$k = $v; /*any*/
                            }
                            return $out;
                        }
                        return to($v);
                    }
                    return $out;
                }
                return to($this->exporters);
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Configuration::exporters');
    }

    /**
     * Exporter-specific configuration. Maps exporter names to their configuration.
     *
     * @param stdClass|null
     * @return bool
     * @throws Exception
     */
    public static function validateExporters(?stdClass $value): bool {
        if (!is_null($value)) {
            foreach ($value as $k => $v) {
                foreach ($v as $k => $v) {
                    if (!defined($v)) {
                        throw new Exception("Attribute Error:Configuration::exporters");
                    }
                }
            }
        }
        return true;
    }

    /**
     * Exporter-specific configuration. Maps exporter names to their configuration.
     *
     * @throws Exception
     * @return ?stdClass
     */
    public function getExporters(): ?stdClass {
        if (Configuration::validateExporters($this->exporters))  {
            return $this->exporters;
        }
        throw new Exception('never get to getExporters Configuration::exporters');
    }

    /**
     * Exporter-specific configuration. Maps exporter names to their configuration.
     *
     * @return ?stdClass
     */
    public static function sampleExporters(): ?stdClass {
        function sample(): stdClass {
            $out = new stdClass();
            function sample(): stdClass {
                $out = new stdClass();
                $out->{'Configuration'} = 'AnyType::Configuration::exporters::31';/*31:exporters*/
                return $out;
            }
            return sample();
            return $out;
        }
        return sample();
    }

    /**
     * @param ?stdClass $value
     * @throws Exception
     * @return ?ExtractColorsConfiguration
     */
    public static function fromExtractColors(?stdClass $value): ?ExtractColorsConfiguration {
        if (!is_null($value)) {
            return ExtractColorsConfiguration::from($value); /*class*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?stdClass
     */
    public function toExtractColors(): ?stdClass {
        if (Configuration::validateExtractColors($this->extractColors))  {
            if (!is_null($this->extractColors)) {
                return $this->extractColors->to(); /*class*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Configuration::extractColors');
    }

    /**
     * @param ExtractColorsConfiguration|null
     * @return bool
     * @throws Exception
     */
    public static function validateExtractColors(?ExtractColorsConfiguration $value): bool {
        if (!is_null($value)) {
            $value->validate();
        }
        return true;
    }

    /**
     * @throws Exception
     * @return ?ExtractColorsConfiguration
     */
    public function getExtractColors(): ?ExtractColorsConfiguration {
        if (Configuration::validateExtractColors($this->extractColors))  {
            return $this->extractColors;
        }
        throw new Exception('never get to getExtractColors Configuration::extractColors');
    }

    /**
     * @return ?ExtractColorsConfiguration
     */
    public static function sampleExtractColors(): ?ExtractColorsConfiguration {
        return ExtractColorsConfiguration::sample(); /*32:extractColors*/
    }

    /**
     * @param ?stdClass $value
     * @throws Exception
     * @return ?MakeGIFSConfiguration
     */
    public static function fromMakeGifs(?stdClass $value): ?MakeGIFSConfiguration {
        if (!is_null($value)) {
            return MakeGIFSConfiguration::from($value); /*class*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?stdClass
     */
    public function toMakeGifs(): ?stdClass {
        if (Configuration::validateMakeGifs($this->makeGifs))  {
            if (!is_null($this->makeGifs)) {
                return $this->makeGifs->to(); /*class*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Configuration::makeGifs');
    }

    /**
     * @param MakeGIFSConfiguration|null
     * @return bool
     * @throws Exception
     */
    public static function validateMakeGifs(?MakeGIFSConfiguration $value): bool {
        if (!is_null($value)) {
            $value->validate();
        }
        return true;
    }

    /**
     * @throws Exception
     * @return ?MakeGIFSConfiguration
     */
    public function getMakeGifs(): ?MakeGIFSConfiguration {
        if (Configuration::validateMakeGifs($this->makeGifs))  {
            return $this->makeGifs;
        }
        throw new Exception('never get to getMakeGifs Configuration::makeGifs');
    }

    /**
     * @return ?MakeGIFSConfiguration
     */
    public static function sampleMakeGifs(): ?MakeGIFSConfiguration {
        return MakeGIFSConfiguration::sample(); /*33:makeGifs*/
    }

    /**
     * @param ?stdClass $value
     * @throws Exception
     * @return ?MakeThumbnailsConfiguration
     */
    public static function fromMakeThumbnails(?stdClass $value): ?MakeThumbnailsConfiguration {
        if (!is_null($value)) {
            return MakeThumbnailsConfiguration::from($value); /*class*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?stdClass
     */
    public function toMakeThumbnails(): ?stdClass {
        if (Configuration::validateMakeThumbnails($this->makeThumbnails))  {
            if (!is_null($this->makeThumbnails)) {
                return $this->makeThumbnails->to(); /*class*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Configuration::makeThumbnails');
    }

    /**
     * @param MakeThumbnailsConfiguration|null
     * @return bool
     * @throws Exception
     */
    public static function validateMakeThumbnails(?MakeThumbnailsConfiguration $value): bool {
        if (!is_null($value)) {
            $value->validate();
        }
        return true;
    }

    /**
     * @throws Exception
     * @return ?MakeThumbnailsConfiguration
     */
    public function getMakeThumbnails(): ?MakeThumbnailsConfiguration {
        if (Configuration::validateMakeThumbnails($this->makeThumbnails))  {
            return $this->makeThumbnails;
        }
        throw new Exception('never get to getMakeThumbnails Configuration::makeThumbnails');
    }

    /**
     * @return ?MakeThumbnailsConfiguration
     */
    public static function sampleMakeThumbnails(): ?MakeThumbnailsConfiguration {
        return MakeThumbnailsConfiguration::sample(); /*34:makeThumbnails*/
    }

    /**
     * @param ?stdClass $value
     * @throws Exception
     * @return ?MediaConfiguration
     */
    public static function fromMedia(?stdClass $value): ?MediaConfiguration {
        if (!is_null($value)) {
            return MediaConfiguration::from($value); /*class*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?stdClass
     */
    public function toMedia(): ?stdClass {
        if (Configuration::validateMedia($this->media))  {
            if (!is_null($this->media)) {
                return $this->media->to(); /*class*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Configuration::media');
    }

    /**
     * @param MediaConfiguration|null
     * @return bool
     * @throws Exception
     */
    public static function validateMedia(?MediaConfiguration $value): bool {
        if (!is_null($value)) {
            $value->validate();
        }
        return true;
    }

    /**
     * @throws Exception
     * @return ?MediaConfiguration
     */
    public function getMedia(): ?MediaConfiguration {
        if (Configuration::validateMedia($this->media))  {
            return $this->media;
        }
        throw new Exception('never get to getMedia Configuration::media');
    }

    /**
     * @return ?MediaConfiguration
     */
    public static function sampleMedia(): ?MediaConfiguration {
        return MediaConfiguration::sample(); /*35:media*/
    }

    /**
     * Path to the directory containing all projects. Must be absolute.
     *
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromProjectsAt(string $value): string {
        return $value; /*string*/
    }

    /**
     * Path to the directory containing all projects. Must be absolute.
     *
     * @throws Exception
     * @return string
     */
    public function toProjectsAt(): string {
        if (Configuration::validateProjectsAt($this->projectsAt))  {
            return $this->projectsAt; /*string*/
        }
        throw new Exception('never get to this Configuration::projectsAt');
    }

    /**
     * Path to the directory containing all projects. Must be absolute.
     *
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateProjectsAt(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Configuration::projectsAt");
        }
        return true;
    }

    /**
     * Path to the directory containing all projects. Must be absolute.
     *
     * @throws Exception
     * @return string
     */
    public function getProjectsAt(): string {
        if (Configuration::validateProjectsAt($this->projectsAt))  {
            return $this->projectsAt;
        }
        throw new Exception('never get to getProjectsAt Configuration::projectsAt');
    }

    /**
     * Path to the directory containing all projects. Must be absolute.
     *
     * @return string
     */
    public static function sampleProjectsAt(): string {
        return 'Configuration::projectsAt::36'; /*36:projectsAt*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromScatteredModeFolder(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toScatteredModeFolder(): string {
        if (Configuration::validateScatteredModeFolder($this->scatteredModeFolder))  {
            return $this->scatteredModeFolder; /*string*/
        }
        throw new Exception('never get to this Configuration::scatteredModeFolder');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateScatteredModeFolder(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Configuration::scatteredModeFolder");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getScatteredModeFolder(): string {
        if (Configuration::validateScatteredModeFolder($this->scatteredModeFolder))  {
            return $this->scatteredModeFolder;
        }
        throw new Exception('never get to getScatteredModeFolder Configuration::scatteredModeFolder');
    }

    /**
     * @return string
     */
    public static function sampleScatteredModeFolder(): string {
        return 'Configuration::scatteredModeFolder::37'; /*37:scatteredModeFolder*/
    }

    /**
     * @param ?stdClass $value
     * @throws Exception
     * @return ?TagsConfiguration
     */
    public static function fromTags(?stdClass $value): ?TagsConfiguration {
        if (!is_null($value)) {
            return TagsConfiguration::from($value); /*class*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?stdClass
     */
    public function toTags(): ?stdClass {
        if (Configuration::validateTags($this->tags))  {
            if (!is_null($this->tags)) {
                return $this->tags->to(); /*class*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Configuration::tags');
    }

    /**
     * @param TagsConfiguration|null
     * @return bool
     * @throws Exception
     */
    public static function validateTags(?TagsConfiguration $value): bool {
        if (!is_null($value)) {
            $value->validate();
        }
        return true;
    }

    /**
     * @throws Exception
     * @return ?TagsConfiguration
     */
    public function getTags(): ?TagsConfiguration {
        if (Configuration::validateTags($this->tags))  {
            return $this->tags;
        }
        throw new Exception('never get to getTags Configuration::tags');
    }

    /**
     * @return ?TagsConfiguration
     */
    public static function sampleTags(): ?TagsConfiguration {
        return TagsConfiguration::sample(); /*38:tags*/
    }

    /**
     * @param ?stdClass $value
     * @throws Exception
     * @return ?TechnologiesConfiguration
     */
    public static function fromTechnologies(?stdClass $value): ?TechnologiesConfiguration {
        if (!is_null($value)) {
            return TechnologiesConfiguration::from($value); /*class*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?stdClass
     */
    public function toTechnologies(): ?stdClass {
        if (Configuration::validateTechnologies($this->technologies))  {
            if (!is_null($this->technologies)) {
                return $this->technologies->to(); /*class*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this Configuration::technologies');
    }

    /**
     * @param TechnologiesConfiguration|null
     * @return bool
     * @throws Exception
     */
    public static function validateTechnologies(?TechnologiesConfiguration $value): bool {
        if (!is_null($value)) {
            $value->validate();
        }
        return true;
    }

    /**
     * @throws Exception
     * @return ?TechnologiesConfiguration
     */
    public function getTechnologies(): ?TechnologiesConfiguration {
        if (Configuration::validateTechnologies($this->technologies))  {
            return $this->technologies;
        }
        throw new Exception('never get to getTechnologies Configuration::technologies');
    }

    /**
     * @return ?TechnologiesConfiguration
     */
    public static function sampleTechnologies(): ?TechnologiesConfiguration {
        return TechnologiesConfiguration::sample(); /*39:technologies*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return Configuration::validateExporters($this->exporters)
        || Configuration::validateExtractColors($this->extractColors)
        || Configuration::validateMakeGifs($this->makeGifs)
        || Configuration::validateMakeThumbnails($this->makeThumbnails)
        || Configuration::validateMedia($this->media)
        || Configuration::validateProjectsAt($this->projectsAt)
        || Configuration::validateScatteredModeFolder($this->scatteredModeFolder)
        || Configuration::validateTags($this->tags)
        || Configuration::validateTechnologies($this->technologies);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'exporters'} = $this->toExporters();
        $out->{'extract colors'} = $this->toExtractColors();
        $out->{'make gifs'} = $this->toMakeGifs();
        $out->{'make thumbnails'} = $this->toMakeThumbnails();
        $out->{'media'} = $this->toMedia();
        $out->{'projects at'} = $this->toProjectsAt();
        $out->{'scattered mode folder'} = $this->toScatteredModeFolder();
        $out->{'tags'} = $this->toTags();
        $out->{'technologies'} = $this->toTechnologies();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return Configuration
     * @throws Exception
     */
    public static function from(stdClass $obj): Configuration {
        return new Configuration(
         Configuration::fromExporters($obj->{'exporters'})
        ,Configuration::fromExtractColors($obj->{'extract colors'})
        ,Configuration::fromMakeGifs($obj->{'make gifs'})
        ,Configuration::fromMakeThumbnails($obj->{'make thumbnails'})
        ,Configuration::fromMedia($obj->{'media'})
        ,Configuration::fromProjectsAt($obj->{'projects at'})
        ,Configuration::fromScatteredModeFolder($obj->{'scattered mode folder'})
        ,Configuration::fromTags($obj->{'tags'})
        ,Configuration::fromTechnologies($obj->{'technologies'})
        );
    }

    /**
     * @return Configuration
     */
    public static function sample(): Configuration {
        return new Configuration(
         Configuration::sampleExporters()
        ,Configuration::sampleExtractColors()
        ,Configuration::sampleMakeGifs()
        ,Configuration::sampleMakeThumbnails()
        ,Configuration::sampleMedia()
        ,Configuration::sampleProjectsAt()
        ,Configuration::sampleScatteredModeFolder()
        ,Configuration::sampleTags()
        ,Configuration::sampleTechnologies()
        );
    }
}

// This is a autogenerated file:ExtractColorsConfiguration

class ExtractColorsConfiguration {
    private array $defaultFiles; // json:default files Required
    private bool $enabled; // json:enabled Required
    private array $extract; // json:extract Required

    /**
     * @param array $defaultFiles
     * @param bool $enabled
     * @param array $extract
     */
    public function __construct(array $defaultFiles, bool $enabled, array $extract) {
        $this->defaultFiles = $defaultFiles;
        $this->enabled = $enabled;
        $this->extract = $extract;
    }

    /**
     * @param array $value
     * @throws Exception
     * @return array
     */
    public static function fromDefaultFiles(array $value): array {
        return  array_map(function ($value) {
            return $value; /*string*/
        }, $value);
    }

    /**
     * @throws Exception
     * @return array
     */
    public function toDefaultFiles(): array {
        if (ExtractColorsConfiguration::validateDefaultFiles($this->defaultFiles))  {
            return array_map(function ($value) {
                return $value; /*string*/
            }, $this->defaultFiles);
        }
        throw new Exception('never get to this ExtractColorsConfiguration::defaultFiles');
    }

    /**
     * @param array
     * @return bool
     * @throws Exception
     */
    public static function validateDefaultFiles(array $value): bool {
        if (!is_array($value)) {
            throw new Exception("Attribute Error:ExtractColorsConfiguration::defaultFiles");
        }
        array_walk($value, function($value_v) {
            if (!is_string($value_v)) {
                throw new Exception("Attribute Error:ExtractColorsConfiguration::defaultFiles");
            }
        });
        return true;
    }

    /**
     * @throws Exception
     * @return array
     */
    public function getDefaultFiles(): array {
        if (ExtractColorsConfiguration::validateDefaultFiles($this->defaultFiles))  {
            return $this->defaultFiles;
        }
        throw new Exception('never get to getDefaultFiles ExtractColorsConfiguration::defaultFiles');
    }

    /**
     * @return array
     */
    public static function sampleDefaultFiles(): array {
        return  array(
            'ExtractColorsConfiguration::::31' /*31:*/
        ); /* 31:defaultFiles*/
    }

    /**
     * @param bool $value
     * @throws Exception
     * @return bool
     */
    public static function fromEnabled(bool $value): bool {
        return $value; /*bool*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function toEnabled(): bool {
        if (ExtractColorsConfiguration::validateEnabled($this->enabled))  {
            return $this->enabled; /*bool*/
        }
        throw new Exception('never get to this ExtractColorsConfiguration::enabled');
    }

    /**
     * @param bool
     * @return bool
     * @throws Exception
     */
    public static function validateEnabled(bool $value): bool {
        if (!is_bool($value)) {
            throw new Exception("Attribute Error:ExtractColorsConfiguration::enabled");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function getEnabled(): bool {
        if (ExtractColorsConfiguration::validateEnabled($this->enabled))  {
            return $this->enabled;
        }
        throw new Exception('never get to getEnabled ExtractColorsConfiguration::enabled');
    }

    /**
     * @return bool
     */
    public static function sampleEnabled(): bool {
        return true; /*32:enabled*/
    }

    /**
     * @param array $value
     * @throws Exception
     * @return array
     */
    public static function fromExtract(array $value): array {
        return  array_map(function ($value) {
            return $value; /*string*/
        }, $value);
    }

    /**
     * @throws Exception
     * @return array
     */
    public function toExtract(): array {
        if (ExtractColorsConfiguration::validateExtract($this->extract))  {
            return array_map(function ($value) {
                return $value; /*string*/
            }, $this->extract);
        }
        throw new Exception('never get to this ExtractColorsConfiguration::extract');
    }

    /**
     * @param array
     * @return bool
     * @throws Exception
     */
    public static function validateExtract(array $value): bool {
        if (!is_array($value)) {
            throw new Exception("Attribute Error:ExtractColorsConfiguration::extract");
        }
        array_walk($value, function($value_v) {
            if (!is_string($value_v)) {
                throw new Exception("Attribute Error:ExtractColorsConfiguration::extract");
            }
        });
        return true;
    }

    /**
     * @throws Exception
     * @return array
     */
    public function getExtract(): array {
        if (ExtractColorsConfiguration::validateExtract($this->extract))  {
            return $this->extract;
        }
        throw new Exception('never get to getExtract ExtractColorsConfiguration::extract');
    }

    /**
     * @return array
     */
    public static function sampleExtract(): array {
        return  array(
            'ExtractColorsConfiguration::::33' /*33:*/
        ); /* 33:extract*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return ExtractColorsConfiguration::validateDefaultFiles($this->defaultFiles)
        || ExtractColorsConfiguration::validateEnabled($this->enabled)
        || ExtractColorsConfiguration::validateExtract($this->extract);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'default files'} = $this->toDefaultFiles();
        $out->{'enabled'} = $this->toEnabled();
        $out->{'extract'} = $this->toExtract();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return ExtractColorsConfiguration
     * @throws Exception
     */
    public static function from(stdClass $obj): ExtractColorsConfiguration {
        return new ExtractColorsConfiguration(
         ExtractColorsConfiguration::fromDefaultFiles($obj->{'default files'})
        ,ExtractColorsConfiguration::fromEnabled($obj->{'enabled'})
        ,ExtractColorsConfiguration::fromExtract($obj->{'extract'})
        );
    }

    /**
     * @return ExtractColorsConfiguration
     */
    public static function sample(): ExtractColorsConfiguration {
        return new ExtractColorsConfiguration(
         ExtractColorsConfiguration::sampleDefaultFiles()
        ,ExtractColorsConfiguration::sampleEnabled()
        ,ExtractColorsConfiguration::sampleExtract()
        );
    }
}

// This is a autogenerated file:MakeGIFSConfiguration

class MakeGIFSConfiguration {
    private bool $enabled; // json:enabled Required
    private string $fileNameTemplate; // json:file name template Required

    /**
     * @param bool $enabled
     * @param string $fileNameTemplate
     */
    public function __construct(bool $enabled, string $fileNameTemplate) {
        $this->enabled = $enabled;
        $this->fileNameTemplate = $fileNameTemplate;
    }

    /**
     * @param bool $value
     * @throws Exception
     * @return bool
     */
    public static function fromEnabled(bool $value): bool {
        return $value; /*bool*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function toEnabled(): bool {
        if (MakeGIFSConfiguration::validateEnabled($this->enabled))  {
            return $this->enabled; /*bool*/
        }
        throw new Exception('never get to this MakeGIFSConfiguration::enabled');
    }

    /**
     * @param bool
     * @return bool
     * @throws Exception
     */
    public static function validateEnabled(bool $value): bool {
        if (!is_bool($value)) {
            throw new Exception("Attribute Error:MakeGIFSConfiguration::enabled");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function getEnabled(): bool {
        if (MakeGIFSConfiguration::validateEnabled($this->enabled))  {
            return $this->enabled;
        }
        throw new Exception('never get to getEnabled MakeGIFSConfiguration::enabled');
    }

    /**
     * @return bool
     */
    public static function sampleEnabled(): bool {
        return true; /*31:enabled*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromFileNameTemplate(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toFileNameTemplate(): string {
        if (MakeGIFSConfiguration::validateFileNameTemplate($this->fileNameTemplate))  {
            return $this->fileNameTemplate; /*string*/
        }
        throw new Exception('never get to this MakeGIFSConfiguration::fileNameTemplate');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateFileNameTemplate(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:MakeGIFSConfiguration::fileNameTemplate");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getFileNameTemplate(): string {
        if (MakeGIFSConfiguration::validateFileNameTemplate($this->fileNameTemplate))  {
            return $this->fileNameTemplate;
        }
        throw new Exception('never get to getFileNameTemplate MakeGIFSConfiguration::fileNameTemplate');
    }

    /**
     * @return string
     */
    public static function sampleFileNameTemplate(): string {
        return 'MakeGIFSConfiguration::fileNameTemplate::32'; /*32:fileNameTemplate*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return MakeGIFSConfiguration::validateEnabled($this->enabled)
        || MakeGIFSConfiguration::validateFileNameTemplate($this->fileNameTemplate);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'enabled'} = $this->toEnabled();
        $out->{'file name template'} = $this->toFileNameTemplate();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return MakeGIFSConfiguration
     * @throws Exception
     */
    public static function from(stdClass $obj): MakeGIFSConfiguration {
        return new MakeGIFSConfiguration(
         MakeGIFSConfiguration::fromEnabled($obj->{'enabled'})
        ,MakeGIFSConfiguration::fromFileNameTemplate($obj->{'file name template'})
        );
    }

    /**
     * @return MakeGIFSConfiguration
     */
    public static function sample(): MakeGIFSConfiguration {
        return new MakeGIFSConfiguration(
         MakeGIFSConfiguration::sampleEnabled()
        ,MakeGIFSConfiguration::sampleFileNameTemplate()
        );
    }
}

// This is a autogenerated file:MakeThumbnailsConfiguration

class MakeThumbnailsConfiguration {
    private bool $enabled; // json:enabled Required
    private string $fileNameTemplate; // json:file name template Required
    private string $inputFile; // json:input file Required
    private array $sizes; // json:sizes Required

    /**
     * @param bool $enabled
     * @param string $fileNameTemplate
     * @param string $inputFile
     * @param array $sizes
     */
    public function __construct(bool $enabled, string $fileNameTemplate, string $inputFile, array $sizes) {
        $this->enabled = $enabled;
        $this->fileNameTemplate = $fileNameTemplate;
        $this->inputFile = $inputFile;
        $this->sizes = $sizes;
    }

    /**
     * @param bool $value
     * @throws Exception
     * @return bool
     */
    public static function fromEnabled(bool $value): bool {
        return $value; /*bool*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function toEnabled(): bool {
        if (MakeThumbnailsConfiguration::validateEnabled($this->enabled))  {
            return $this->enabled; /*bool*/
        }
        throw new Exception('never get to this MakeThumbnailsConfiguration::enabled');
    }

    /**
     * @param bool
     * @return bool
     * @throws Exception
     */
    public static function validateEnabled(bool $value): bool {
        if (!is_bool($value)) {
            throw new Exception("Attribute Error:MakeThumbnailsConfiguration::enabled");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function getEnabled(): bool {
        if (MakeThumbnailsConfiguration::validateEnabled($this->enabled))  {
            return $this->enabled;
        }
        throw new Exception('never get to getEnabled MakeThumbnailsConfiguration::enabled');
    }

    /**
     * @return bool
     */
    public static function sampleEnabled(): bool {
        return true; /*31:enabled*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromFileNameTemplate(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toFileNameTemplate(): string {
        if (MakeThumbnailsConfiguration::validateFileNameTemplate($this->fileNameTemplate))  {
            return $this->fileNameTemplate; /*string*/
        }
        throw new Exception('never get to this MakeThumbnailsConfiguration::fileNameTemplate');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateFileNameTemplate(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:MakeThumbnailsConfiguration::fileNameTemplate");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getFileNameTemplate(): string {
        if (MakeThumbnailsConfiguration::validateFileNameTemplate($this->fileNameTemplate))  {
            return $this->fileNameTemplate;
        }
        throw new Exception('never get to getFileNameTemplate MakeThumbnailsConfiguration::fileNameTemplate');
    }

    /**
     * @return string
     */
    public static function sampleFileNameTemplate(): string {
        return 'MakeThumbnailsConfiguration::fileNameTemplate::32'; /*32:fileNameTemplate*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromInputFile(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toInputFile(): string {
        if (MakeThumbnailsConfiguration::validateInputFile($this->inputFile))  {
            return $this->inputFile; /*string*/
        }
        throw new Exception('never get to this MakeThumbnailsConfiguration::inputFile');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateInputFile(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:MakeThumbnailsConfiguration::inputFile");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getInputFile(): string {
        if (MakeThumbnailsConfiguration::validateInputFile($this->inputFile))  {
            return $this->inputFile;
        }
        throw new Exception('never get to getInputFile MakeThumbnailsConfiguration::inputFile');
    }

    /**
     * @return string
     */
    public static function sampleInputFile(): string {
        return 'MakeThumbnailsConfiguration::inputFile::33'; /*33:inputFile*/
    }

    /**
     * @param array $value
     * @throws Exception
     * @return array
     */
    public static function fromSizes(array $value): array {
        return  array_map(function ($value) {
            return $value; /*int*/
        }, $value);
    }

    /**
     * @throws Exception
     * @return array
     */
    public function toSizes(): array {
        if (MakeThumbnailsConfiguration::validateSizes($this->sizes))  {
            return array_map(function ($value) {
                return $value; /*int*/
            }, $this->sizes);
        }
        throw new Exception('never get to this MakeThumbnailsConfiguration::sizes');
    }

    /**
     * @param array
     * @return bool
     * @throws Exception
     */
    public static function validateSizes(array $value): bool {
        if (!is_array($value)) {
            throw new Exception("Attribute Error:MakeThumbnailsConfiguration::sizes");
        }
        array_walk($value, function($value_v) {
            if (!is_integer($value_v)) {
                throw new Exception("Attribute Error:MakeThumbnailsConfiguration::sizes");
            }
        });
        return true;
    }

    /**
     * @throws Exception
     * @return array
     */
    public function getSizes(): array {
        if (MakeThumbnailsConfiguration::validateSizes($this->sizes))  {
            return $this->sizes;
        }
        throw new Exception('never get to getSizes MakeThumbnailsConfiguration::sizes');
    }

    /**
     * @return array
     */
    public static function sampleSizes(): array {
        return  array(
            34 /*34:*/
        ); /* 34:sizes*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return MakeThumbnailsConfiguration::validateEnabled($this->enabled)
        || MakeThumbnailsConfiguration::validateFileNameTemplate($this->fileNameTemplate)
        || MakeThumbnailsConfiguration::validateInputFile($this->inputFile)
        || MakeThumbnailsConfiguration::validateSizes($this->sizes);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'enabled'} = $this->toEnabled();
        $out->{'file name template'} = $this->toFileNameTemplate();
        $out->{'input file'} = $this->toInputFile();
        $out->{'sizes'} = $this->toSizes();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return MakeThumbnailsConfiguration
     * @throws Exception
     */
    public static function from(stdClass $obj): MakeThumbnailsConfiguration {
        return new MakeThumbnailsConfiguration(
         MakeThumbnailsConfiguration::fromEnabled($obj->{'enabled'})
        ,MakeThumbnailsConfiguration::fromFileNameTemplate($obj->{'file name template'})
        ,MakeThumbnailsConfiguration::fromInputFile($obj->{'input file'})
        ,MakeThumbnailsConfiguration::fromSizes($obj->{'sizes'})
        );
    }

    /**
     * @return MakeThumbnailsConfiguration
     */
    public static function sample(): MakeThumbnailsConfiguration {
        return new MakeThumbnailsConfiguration(
         MakeThumbnailsConfiguration::sampleEnabled()
        ,MakeThumbnailsConfiguration::sampleFileNameTemplate()
        ,MakeThumbnailsConfiguration::sampleInputFile()
        ,MakeThumbnailsConfiguration::sampleSizes()
        );
    }
}

// This is a autogenerated file:MediaConfiguration

class MediaConfiguration {
    private string $at; // json:at Required

    /**
     * @param string $at
     */
    public function __construct(string $at) {
        $this->at = $at;
    }

    /**
     * Path to the media directory.
     *
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromAt(string $value): string {
        return $value; /*string*/
    }

    /**
     * Path to the media directory.
     *
     * @throws Exception
     * @return string
     */
    public function toAt(): string {
        if (MediaConfiguration::validateAt($this->at))  {
            return $this->at; /*string*/
        }
        throw new Exception('never get to this MediaConfiguration::at');
    }

    /**
     * Path to the media directory.
     *
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateAt(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:MediaConfiguration::at");
        }
        return true;
    }

    /**
     * Path to the media directory.
     *
     * @throws Exception
     * @return string
     */
    public function getAt(): string {
        if (MediaConfiguration::validateAt($this->at))  {
            return $this->at;
        }
        throw new Exception('never get to getAt MediaConfiguration::at');
    }

    /**
     * Path to the media directory.
     *
     * @return string
     */
    public static function sampleAt(): string {
        return 'MediaConfiguration::at::31'; /*31:at*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return MediaConfiguration::validateAt($this->at);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'at'} = $this->toAt();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return MediaConfiguration
     * @throws Exception
     */
    public static function from(stdClass $obj): MediaConfiguration {
        return new MediaConfiguration(
         MediaConfiguration::fromAt($obj->{'at'})
        );
    }

    /**
     * @return MediaConfiguration
     */
    public static function sample(): MediaConfiguration {
        return new MediaConfiguration(
         MediaConfiguration::sampleAt()
        );
    }
}

// This is a autogenerated file:TagsConfiguration

class TagsConfiguration {
    private string $repository; // json:repository Required

    /**
     * @param string $repository
     */
    public function __construct(string $repository) {
        $this->repository = $repository;
    }

    /**
     * Path to file describing all tags.
     *
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromRepository(string $value): string {
        return $value; /*string*/
    }

    /**
     * Path to file describing all tags.
     *
     * @throws Exception
     * @return string
     */
    public function toRepository(): string {
        if (TagsConfiguration::validateRepository($this->repository))  {
            return $this->repository; /*string*/
        }
        throw new Exception('never get to this TagsConfiguration::repository');
    }

    /**
     * Path to file describing all tags.
     *
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateRepository(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:TagsConfiguration::repository");
        }
        return true;
    }

    /**
     * Path to file describing all tags.
     *
     * @throws Exception
     * @return string
     */
    public function getRepository(): string {
        if (TagsConfiguration::validateRepository($this->repository))  {
            return $this->repository;
        }
        throw new Exception('never get to getRepository TagsConfiguration::repository');
    }

    /**
     * Path to file describing all tags.
     *
     * @return string
     */
    public static function sampleRepository(): string {
        return 'TagsConfiguration::repository::31'; /*31:repository*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return TagsConfiguration::validateRepository($this->repository);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'repository'} = $this->toRepository();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return TagsConfiguration
     * @throws Exception
     */
    public static function from(stdClass $obj): TagsConfiguration {
        return new TagsConfiguration(
         TagsConfiguration::fromRepository($obj->{'repository'})
        );
    }

    /**
     * @return TagsConfiguration
     */
    public static function sample(): TagsConfiguration {
        return new TagsConfiguration(
         TagsConfiguration::sampleRepository()
        );
    }
}

// This is a autogenerated file:TechnologiesConfiguration

class TechnologiesConfiguration {
    private string $repository; // json:repository Required

    /**
     * @param string $repository
     */
    public function __construct(string $repository) {
        $this->repository = $repository;
    }

    /**
     * Path to file describing all technologies.
     *
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromRepository(string $value): string {
        return $value; /*string*/
    }

    /**
     * Path to file describing all technologies.
     *
     * @throws Exception
     * @return string
     */
    public function toRepository(): string {
        if (TechnologiesConfiguration::validateRepository($this->repository))  {
            return $this->repository; /*string*/
        }
        throw new Exception('never get to this TechnologiesConfiguration::repository');
    }

    /**
     * Path to file describing all technologies.
     *
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateRepository(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:TechnologiesConfiguration::repository");
        }
        return true;
    }

    /**
     * Path to file describing all technologies.
     *
     * @throws Exception
     * @return string
     */
    public function getRepository(): string {
        if (TechnologiesConfiguration::validateRepository($this->repository))  {
            return $this->repository;
        }
        throw new Exception('never get to getRepository TechnologiesConfiguration::repository');
    }

    /**
     * Path to file describing all technologies.
     *
     * @return string
     */
    public static function sampleRepository(): string {
        return 'TechnologiesConfiguration::repository::31'; /*31:repository*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return TechnologiesConfiguration::validateRepository($this->repository);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'repository'} = $this->toRepository();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return TechnologiesConfiguration
     * @throws Exception
     */
    public static function from(stdClass $obj): TechnologiesConfiguration {
        return new TechnologiesConfiguration(
         TechnologiesConfiguration::fromRepository($obj->{'repository'})
        );
    }

    /**
     * @return TechnologiesConfiguration
     */
    public static function sample(): TechnologiesConfiguration {
        return new TechnologiesConfiguration(
         TechnologiesConfiguration::sampleRepository()
        );
    }
}
